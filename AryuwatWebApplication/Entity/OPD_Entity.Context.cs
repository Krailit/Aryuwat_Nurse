//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AryuwatWebApplication.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OPD_SystemEntities : DbContext
    {
        public OPD_SystemEntities()
            : base("name=OPD_SystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CommissionRate> CommissionRates { get; set; }
        public virtual DbSet<CourseDuration> CourseDurations { get; set; }
        public virtual DbSet<CreditCard> CreditCards { get; set; }
        public virtual DbSet<Master_Room> Master_Room { get; set; }
        public virtual DbSet<MedicalOrder> MedicalOrders { get; set; }
        public virtual DbSet<MedicalSupply> MedicalSupplies { get; set; }
        public virtual DbSet<MedicalSuppliesStock> MedicalSuppliesStocks { get; set; }
        public virtual DbSet<MemberTran> MemberTrans { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<PayInCome> PayInComes { get; set; }
        public virtual DbSet<PersonnelsCom_bak> PersonnelsCom_bak { get; set; }
        public virtual DbSet<PersonnelType> PersonnelTypes { get; set; }
        public virtual DbSet<Prefixbak> Prefixbaks { get; set; }
        public virtual DbSet<Promotion> Promotions { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<Room_Detail> Room_Detail { get; set; }
        public virtual DbSet<RoomBookDoctor> RoomBookDoctors { get; set; }
        public virtual DbSet<SupplieTran> SupplieTrans { get; set; }
        public virtual DbSet<tblMessage> tblMessages { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ActionLog> ActionLogs { get; set; }
        public virtual DbSet<AestheticCenter> AestheticCenters { get; set; }
        public virtual DbSet<AgencyDetail> AgencyDetails { get; set; }
        public virtual DbSet<AgencyEmpTran> AgencyEmpTrans { get; set; }
        public virtual DbSet<AgencyMember> AgencyMembers { get; set; }
        public virtual DbSet<AgencyType> AgencyTypes { get; set; }
        public virtual DbSet<Barter> Barters { get; set; }
        public virtual DbSet<BodyCenter> BodyCenters { get; set; }
        public virtual DbSet<BOMMaterial> BOMMaterials { get; set; }
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<BookingDoctor> BookingDoctors { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<CashCreditCardSOT> CashCreditCardSOTs { get; set; }
        public virtual DbSet<Conf> Confs { get; set; }
        public virtual DbSet<ContactCustomer> ContactCustomers { get; set; }
        public virtual DbSet<CosmeticSurgery> CosmeticSurgeries { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CustomerConnect> CustomerConnects { get; set; }
        public virtual DbSet<CustomerProvider> CustomerProviders { get; set; }
        public virtual DbSet<CustomerProvider_bak> CustomerProvider_bak { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<ExtraMoney> ExtraMoneys { get; set; }
        public virtual DbSet<GiftVoucher> GiftVouchers { get; set; }
        public virtual DbSet<HairCenter> HairCenters { get; set; }
        public virtual DbSet<HowYouhear> HowYouhears { get; set; }
        public virtual DbSet<InvoiceTran> InvoiceTrans { get; set; }
        public virtual DbSet<JobsAlert> JobsAlerts { get; set; }
        public virtual DbSet<MedicalOrder_18_03_2019> MedicalOrder_18_03_2019 { get; set; }
        public virtual DbSet<MedicalOrderDoc> MedicalOrderDocs { get; set; }
        public virtual DbSet<MedicalOrderFileScanCustomer> MedicalOrderFileScanCustomers { get; set; }
        public virtual DbSet<MedicalOrderFileScanDoctor> MedicalOrderFileScanDoctors { get; set; }
        public virtual DbSet<MedicalOrderMove> MedicalOrderMoves { get; set; }
        public virtual DbSet<MedicalOrderMoveTran> MedicalOrderMoveTrans { get; set; }
        public virtual DbSet<MedicalOrderUseTran> MedicalOrderUseTrans { get; set; }
        public virtual DbSet<MedicalSection> MedicalSections { get; set; }
        public virtual DbSet<MedicalSetting> MedicalSettings { get; set; }
        public virtual DbSet<MedicalStatu> MedicalStatus { get; set; }
        public virtual DbSet<MedicalStuff> MedicalStuffs { get; set; }
        public virtual DbSet<MedicalSuppliesStock_Edit> MedicalSuppliesStock_Edit { get; set; }
        public virtual DbSet<MedicalSuppliesStock_org> MedicalSuppliesStock_org { get; set; }
        public virtual DbSet<MemberCard> MemberCards { get; set; }
        public virtual DbSet<MemberCardsTran> MemberCardsTrans { get; set; }
        public virtual DbSet<PALabel> PALabels { get; set; }
        public virtual DbSet<PayByItem> PayByItems { get; set; }
        public virtual DbSet<Personnel> Personnels { get; set; }
        public virtual DbSet<Prefix> Prefixes { get; set; }
        public virtual DbSet<PrintConf> PrintConfs { get; set; }
        public virtual DbSet<PromotionSupplie> PromotionSupplies { get; set; }
        public virtual DbSet<PromotionTran> PromotionTrans { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<ReceiptTran> ReceiptTrans { get; set; }
        public virtual DbSet<Refund> Refunds { get; set; }
        public virtual DbSet<RefundMoneyType> RefundMoneyTypes { get; set; }
        public virtual DbSet<RefundTran> RefundTrans { get; set; }
        public virtual DbSet<RefundType> RefundTypes { get; set; }
        public virtual DbSet<RefVNTran> RefVNTrans { get; set; }
        public virtual DbSet<ServiceRequest> ServiceRequests { get; set; }
        public virtual DbSet<SOClose> SOCloses { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<States_bk> States_bk { get; set; }
        public virtual DbSet<StockREQ> StockREQs { get; set; }
        public virtual DbSet<StockREQTran> StockREQTrans { get; set; }
        public virtual DbSet<StockSPQ> StockSPQs { get; set; }
        public virtual DbSet<StockSPQTran> StockSPQTrans { get; set; }
        public virtual DbSet<StockSuppliesTran> StockSuppliesTrans { get; set; }
        public virtual DbSet<StockWH> StockWHs { get; set; }
        public virtual DbSet<StuffCommission> StuffCommissions { get; set; }
        public virtual DbSet<Subdistrict> Subdistricts { get; set; }
        public virtual DbSet<SubListItem> SubListItems { get; set; }
        public virtual DbSet<SumOfTreatment> SumOfTreatments { get; set; }
        public virtual DbSet<SupplieTransRenewal> SupplieTransRenewals { get; set; }
        public virtual DbSet<SurgeryFee> SurgeryFees { get; set; }
        public virtual DbSet<TaxTran> TaxTrans { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserLicence> UserLicences { get; set; }
        public virtual DbSet<VoucherProduct> VoucherProducts { get; set; }
        public virtual DbSet<V_Administrative> V_Administrative { get; set; }
        public virtual DbSet<View_Customer> View_Customer { get; set; }
        public virtual DbSet<vProductToSOMO> vProductToSOMOes { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<PatientChange> PatientChanges { get; set; }
        public virtual DbSet<Alert_Detail> Alert_Detail { get; set; }
        public virtual DbSet<PatientData> PatientDatas { get; set; }
        public virtual DbSet<FileOPD> FileOPDs { get; set; }
    
        [DbFunction("OPD_SystemEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string str, string separator)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("separator", separator) :
                new ObjectParameter("separator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[OPD_SystemEntities].[SplitString](@str, @separator)", strParameter, separatorParameter);
        }
    
        public virtual int AutoUpdate_Expired()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutoUpdate_Expired");
        }
    
        public virtual int Rebuild_AllIndex()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rebuild_AllIndex");
        }
    
        public virtual ObjectResult<sp_Account_Result> sp_Account(string queryType, string creditCashQueryType, string vN, string eN, string sOT_Code, string cN, string sOno, string rCNo, string medStatus_Code, Nullable<decimal> receiptBath, Nullable<decimal> iNVBath, string vat, string nonVat, Nullable<System.DateTime> receiptDate, Nullable<System.DateTime> dateSave, Nullable<System.DateTime> dateUpdate, Nullable<decimal> salePrice, Nullable<decimal> discount, Nullable<decimal> earnestMoney, Nullable<decimal> netAmount, Nullable<decimal> unpaid, Nullable<decimal> discountPercen, Nullable<int> discountBathByItem, Nullable<decimal> discountBath, string remark, Nullable<decimal> payByItem, string pay_Code, string cD_Code, string cardNumber, Nullable<decimal> cashMoney, Nullable<decimal> priceAfterDis, Nullable<int> payInID, string bankName, Nullable<int> count, string mS_Code, string sUR_ID, string eN_Save, string eN_COMS, string eN_COMS2, Nullable<decimal> com_Bath, Nullable<decimal> com_Bath2, string reCeiptNo, string invNo, string cardType, string billTo, string listOrder, string sORefAccount, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string branchId, string fixSearch)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var creditCashQueryTypeParameter = creditCashQueryType != null ?
                new ObjectParameter("CreditCashQueryType", creditCashQueryType) :
                new ObjectParameter("CreditCashQueryType", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var eNParameter = eN != null ?
                new ObjectParameter("EN", eN) :
                new ObjectParameter("EN", typeof(string));
    
            var sOT_CodeParameter = sOT_Code != null ?
                new ObjectParameter("SOT_Code", sOT_Code) :
                new ObjectParameter("SOT_Code", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var sOnoParameter = sOno != null ?
                new ObjectParameter("SOno", sOno) :
                new ObjectParameter("SOno", typeof(string));
    
            var rCNoParameter = rCNo != null ?
                new ObjectParameter("RCNo", rCNo) :
                new ObjectParameter("RCNo", typeof(string));
    
            var medStatus_CodeParameter = medStatus_Code != null ?
                new ObjectParameter("MedStatus_Code", medStatus_Code) :
                new ObjectParameter("MedStatus_Code", typeof(string));
    
            var receiptBathParameter = receiptBath.HasValue ?
                new ObjectParameter("ReceiptBath", receiptBath) :
                new ObjectParameter("ReceiptBath", typeof(decimal));
    
            var iNVBathParameter = iNVBath.HasValue ?
                new ObjectParameter("INVBath", iNVBath) :
                new ObjectParameter("INVBath", typeof(decimal));
    
            var vatParameter = vat != null ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(string));
    
            var nonVatParameter = nonVat != null ?
                new ObjectParameter("NonVat", nonVat) :
                new ObjectParameter("NonVat", typeof(string));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var dateSaveParameter = dateSave.HasValue ?
                new ObjectParameter("DateSave", dateSave) :
                new ObjectParameter("DateSave", typeof(System.DateTime));
    
            var dateUpdateParameter = dateUpdate.HasValue ?
                new ObjectParameter("DateUpdate", dateUpdate) :
                new ObjectParameter("DateUpdate", typeof(System.DateTime));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var earnestMoneyParameter = earnestMoney.HasValue ?
                new ObjectParameter("EarnestMoney", earnestMoney) :
                new ObjectParameter("EarnestMoney", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var unpaidParameter = unpaid.HasValue ?
                new ObjectParameter("Unpaid", unpaid) :
                new ObjectParameter("Unpaid", typeof(decimal));
    
            var discountPercenParameter = discountPercen.HasValue ?
                new ObjectParameter("DiscountPercen", discountPercen) :
                new ObjectParameter("DiscountPercen", typeof(decimal));
    
            var discountBathByItemParameter = discountBathByItem.HasValue ?
                new ObjectParameter("DiscountBathByItem", discountBathByItem) :
                new ObjectParameter("DiscountBathByItem", typeof(int));
    
            var discountBathParameter = discountBath.HasValue ?
                new ObjectParameter("DiscountBath", discountBath) :
                new ObjectParameter("DiscountBath", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var payByItemParameter = payByItem.HasValue ?
                new ObjectParameter("PayByItem", payByItem) :
                new ObjectParameter("PayByItem", typeof(decimal));
    
            var pay_CodeParameter = pay_Code != null ?
                new ObjectParameter("Pay_Code", pay_Code) :
                new ObjectParameter("Pay_Code", typeof(string));
    
            var cD_CodeParameter = cD_Code != null ?
                new ObjectParameter("CD_Code", cD_Code) :
                new ObjectParameter("CD_Code", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var cashMoneyParameter = cashMoney.HasValue ?
                new ObjectParameter("CashMoney", cashMoney) :
                new ObjectParameter("CashMoney", typeof(decimal));
    
            var priceAfterDisParameter = priceAfterDis.HasValue ?
                new ObjectParameter("PriceAfterDis", priceAfterDis) :
                new ObjectParameter("PriceAfterDis", typeof(decimal));
    
            var payInIDParameter = payInID.HasValue ?
                new ObjectParameter("PayInID", payInID) :
                new ObjectParameter("PayInID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var sUR_IDParameter = sUR_ID != null ?
                new ObjectParameter("SUR_ID", sUR_ID) :
                new ObjectParameter("SUR_ID", typeof(string));
    
            var eN_SaveParameter = eN_Save != null ?
                new ObjectParameter("EN_Save", eN_Save) :
                new ObjectParameter("EN_Save", typeof(string));
    
            var eN_COMSParameter = eN_COMS != null ?
                new ObjectParameter("EN_COMS", eN_COMS) :
                new ObjectParameter("EN_COMS", typeof(string));
    
            var eN_COMS2Parameter = eN_COMS2 != null ?
                new ObjectParameter("EN_COMS2", eN_COMS2) :
                new ObjectParameter("EN_COMS2", typeof(string));
    
            var com_BathParameter = com_Bath.HasValue ?
                new ObjectParameter("Com_Bath", com_Bath) :
                new ObjectParameter("Com_Bath", typeof(decimal));
    
            var com_Bath2Parameter = com_Bath2.HasValue ?
                new ObjectParameter("Com_Bath2", com_Bath2) :
                new ObjectParameter("Com_Bath2", typeof(decimal));
    
            var reCeiptNoParameter = reCeiptNo != null ?
                new ObjectParameter("ReCeiptNo", reCeiptNo) :
                new ObjectParameter("ReCeiptNo", typeof(string));
    
            var invNoParameter = invNo != null ?
                new ObjectParameter("InvNo", invNo) :
                new ObjectParameter("InvNo", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var billToParameter = billTo != null ?
                new ObjectParameter("BillTo", billTo) :
                new ObjectParameter("BillTo", typeof(string));
    
            var listOrderParameter = listOrder != null ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(string));
    
            var sORefAccountParameter = sORefAccount != null ?
                new ObjectParameter("SORefAccount", sORefAccount) :
                new ObjectParameter("SORefAccount", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var fixSearchParameter = fixSearch != null ?
                new ObjectParameter("FixSearch", fixSearch) :
                new ObjectParameter("FixSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Account_Result>("sp_Account", queryTypeParameter, creditCashQueryTypeParameter, vNParameter, eNParameter, sOT_CodeParameter, cNParameter, sOnoParameter, rCNoParameter, medStatus_CodeParameter, receiptBathParameter, iNVBathParameter, vatParameter, nonVatParameter, receiptDateParameter, dateSaveParameter, dateUpdateParameter, salePriceParameter, discountParameter, earnestMoneyParameter, netAmountParameter, unpaidParameter, discountPercenParameter, discountBathByItemParameter, discountBathParameter, remarkParameter, payByItemParameter, pay_CodeParameter, cD_CodeParameter, cardNumberParameter, cashMoneyParameter, priceAfterDisParameter, payInIDParameter, bankNameParameter, countParameter, mS_CodeParameter, sUR_IDParameter, eN_SaveParameter, eN_COMSParameter, eN_COMS2Parameter, com_BathParameter, com_Bath2Parameter, reCeiptNoParameter, invNoParameter, cardTypeParameter, billToParameter, listOrderParameter, sORefAccountParameter, startDateParameter, endDateParameter, branchIdParameter, fixSearchParameter);
        }
    
        public virtual ObjectResult<string> sp_ActionLog(string mO, string sO, string cN, string eN, string tableName, string desc, string keyWord)
        {
            var mOParameter = mO != null ?
                new ObjectParameter("MO", mO) :
                new ObjectParameter("MO", typeof(string));
    
            var sOParameter = sO != null ?
                new ObjectParameter("SO", sO) :
                new ObjectParameter("SO", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var eNParameter = eN != null ?
                new ObjectParameter("EN", eN) :
                new ObjectParameter("EN", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_ActionLog", mOParameter, sOParameter, cNParameter, eNParameter, tableNameParameter, descParameter, keyWordParameter);
        }
    
        public virtual ObjectResult<sp_Administrative_Result> sp_Administrative(string queryType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Administrative_Result>("sp_Administrative", queryTypeParameter);
        }
    
        public virtual int sp_AE_notIN_S(string strCHK)
        {
            var strCHKParameter = strCHK != null ?
                new ObjectParameter("StrCHK", strCHK) :
                new ObjectParameter("StrCHK", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AE_notIN_S", strCHKParameter);
        }
    
        public virtual ObjectResult<string> sp_AestheticCenter(string cN, string facialDesign, string facialTreatment, string laser, string aestheticOther, string createBy, Nullable<System.DateTime> createDate, string updateBy, Nullable<System.DateTime> updateDate, string queryType)
        {
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var facialDesignParameter = facialDesign != null ?
                new ObjectParameter("FacialDesign", facialDesign) :
                new ObjectParameter("FacialDesign", typeof(string));
    
            var facialTreatmentParameter = facialTreatment != null ?
                new ObjectParameter("FacialTreatment", facialTreatment) :
                new ObjectParameter("FacialTreatment", typeof(string));
    
            var laserParameter = laser != null ?
                new ObjectParameter("Laser", laser) :
                new ObjectParameter("Laser", typeof(string));
    
            var aestheticOtherParameter = aestheticOther != null ?
                new ObjectParameter("AestheticOther", aestheticOther) :
                new ObjectParameter("AestheticOther", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_AestheticCenter", cNParameter, facialDesignParameter, facialTreatmentParameter, laserParameter, aestheticOtherParameter, createByParameter, createDateParameter, updateByParameter, updateDateParameter, queryTypeParameter);
        }
    
        public virtual ObjectResult<sp_agency_Result> sp_agency(string queryType, string agenID, string agenName, string agenAddress, Nullable<System.DateTime> updateDate, string agenTel, string agenDescript, string eNSave, string agenTyp, Nullable<decimal> agenRate, Nullable<int> agenOrder, Nullable<int> count, string supportName, string supportTel, string agenMemID, string agenMemName, string agenMemSurName, string agenMemAddress, string agenMemTel, string agenMemIDCard, Nullable<decimal> agenMemRate, string agenMemPrefix, string beUnder, Nullable<int> row_start, Nullable<int> row_end)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var agenIDParameter = agenID != null ?
                new ObjectParameter("AgenID", agenID) :
                new ObjectParameter("AgenID", typeof(string));
    
            var agenNameParameter = agenName != null ?
                new ObjectParameter("AgenName", agenName) :
                new ObjectParameter("AgenName", typeof(string));
    
            var agenAddressParameter = agenAddress != null ?
                new ObjectParameter("AgenAddress", agenAddress) :
                new ObjectParameter("AgenAddress", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var agenTelParameter = agenTel != null ?
                new ObjectParameter("AgenTel", agenTel) :
                new ObjectParameter("AgenTel", typeof(string));
    
            var agenDescriptParameter = agenDescript != null ?
                new ObjectParameter("AgenDescript", agenDescript) :
                new ObjectParameter("AgenDescript", typeof(string));
    
            var eNSaveParameter = eNSave != null ?
                new ObjectParameter("ENSave", eNSave) :
                new ObjectParameter("ENSave", typeof(string));
    
            var agenTypParameter = agenTyp != null ?
                new ObjectParameter("AgenTyp", agenTyp) :
                new ObjectParameter("AgenTyp", typeof(string));
    
            var agenRateParameter = agenRate.HasValue ?
                new ObjectParameter("AgenRate", agenRate) :
                new ObjectParameter("AgenRate", typeof(decimal));
    
            var agenOrderParameter = agenOrder.HasValue ?
                new ObjectParameter("AgenOrder", agenOrder) :
                new ObjectParameter("AgenOrder", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var supportNameParameter = supportName != null ?
                new ObjectParameter("SupportName", supportName) :
                new ObjectParameter("SupportName", typeof(string));
    
            var supportTelParameter = supportTel != null ?
                new ObjectParameter("SupportTel", supportTel) :
                new ObjectParameter("SupportTel", typeof(string));
    
            var agenMemIDParameter = agenMemID != null ?
                new ObjectParameter("AgenMemID", agenMemID) :
                new ObjectParameter("AgenMemID", typeof(string));
    
            var agenMemNameParameter = agenMemName != null ?
                new ObjectParameter("AgenMemName", agenMemName) :
                new ObjectParameter("AgenMemName", typeof(string));
    
            var agenMemSurNameParameter = agenMemSurName != null ?
                new ObjectParameter("AgenMemSurName", agenMemSurName) :
                new ObjectParameter("AgenMemSurName", typeof(string));
    
            var agenMemAddressParameter = agenMemAddress != null ?
                new ObjectParameter("AgenMemAddress", agenMemAddress) :
                new ObjectParameter("AgenMemAddress", typeof(string));
    
            var agenMemTelParameter = agenMemTel != null ?
                new ObjectParameter("AgenMemTel", agenMemTel) :
                new ObjectParameter("AgenMemTel", typeof(string));
    
            var agenMemIDCardParameter = agenMemIDCard != null ?
                new ObjectParameter("AgenMemIDCard", agenMemIDCard) :
                new ObjectParameter("AgenMemIDCard", typeof(string));
    
            var agenMemRateParameter = agenMemRate.HasValue ?
                new ObjectParameter("AgenMemRate", agenMemRate) :
                new ObjectParameter("AgenMemRate", typeof(decimal));
    
            var agenMemPrefixParameter = agenMemPrefix != null ?
                new ObjectParameter("AgenMemPrefix", agenMemPrefix) :
                new ObjectParameter("AgenMemPrefix", typeof(string));
    
            var beUnderParameter = beUnder != null ?
                new ObjectParameter("BeUnder", beUnder) :
                new ObjectParameter("BeUnder", typeof(string));
    
            var row_startParameter = row_start.HasValue ?
                new ObjectParameter("row_start", row_start) :
                new ObjectParameter("row_start", typeof(int));
    
            var row_endParameter = row_end.HasValue ?
                new ObjectParameter("row_end", row_end) :
                new ObjectParameter("row_end", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_agency_Result>("sp_agency", queryTypeParameter, agenIDParameter, agenNameParameter, agenAddressParameter, updateDateParameter, agenTelParameter, agenDescriptParameter, eNSaveParameter, agenTypParameter, agenRateParameter, agenOrderParameter, countParameter, supportNameParameter, supportTelParameter, agenMemIDParameter, agenMemNameParameter, agenMemSurNameParameter, agenMemAddressParameter, agenMemTelParameter, agenMemIDCardParameter, agenMemRateParameter, agenMemPrefixParameter, beUnderParameter, row_startParameter, row_endParameter);
        }
    
        public virtual ObjectResult<string> sp_BodyCenter(string cN, string bodyVaserTite, string bodyTreatment, string bodyOther, string createBy, Nullable<System.DateTime> createDate, string updateBy, Nullable<System.DateTime> updateDate, string queryType)
        {
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var bodyVaserTiteParameter = bodyVaserTite != null ?
                new ObjectParameter("BodyVaserTite", bodyVaserTite) :
                new ObjectParameter("BodyVaserTite", typeof(string));
    
            var bodyTreatmentParameter = bodyTreatment != null ?
                new ObjectParameter("BodyTreatment", bodyTreatment) :
                new ObjectParameter("BodyTreatment", typeof(string));
    
            var bodyOtherParameter = bodyOther != null ?
                new ObjectParameter("BodyOther", bodyOther) :
                new ObjectParameter("BodyOther", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_BodyCenter", cNParameter, bodyVaserTiteParameter, bodyTreatmentParameter, bodyOtherParameter, createByParameter, createDateParameter, updateByParameter, updateDateParameter, queryTypeParameter);
        }
    
        public virtual ObjectResult<sp_BookingRoom_Result> sp_BookingRoom(string queryType, string tYP, string roomID, string bookID, Nullable<System.DateTime> appointDate, Nullable<System.DateTime> dateBookDoctor, Nullable<System.DateTime> dateShowStart, Nullable<System.DateTime> dateShowEnd, Nullable<System.DateTime> timeStart, Nullable<System.DateTime> timeEnd, string duration, Nullable<int> a, Nullable<int> r, Nullable<int> g, Nullable<int> b, string eNSave, string custName, string custID, string treadment, string mobile, string drName, string drID, string howmagazine, string howinternet, string howfriend, string hownewpaper, string howTravel, string howother, string howotherText, string note, string branchID, string whereDate, string whereRoomTyp, Nullable<System.DateTime> dateSave, Nullable<int> iD, Nullable<int> iDBookLink, Nullable<int> addDate, Nullable<int> drBookID, string dayFullName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var tYPParameter = tYP != null ?
                new ObjectParameter("TYP", tYP) :
                new ObjectParameter("TYP", typeof(string));
    
            var roomIDParameter = roomID != null ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(string));
    
            var bookIDParameter = bookID != null ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(string));
    
            var appointDateParameter = appointDate.HasValue ?
                new ObjectParameter("AppointDate", appointDate) :
                new ObjectParameter("AppointDate", typeof(System.DateTime));
    
            var dateBookDoctorParameter = dateBookDoctor.HasValue ?
                new ObjectParameter("DateBookDoctor", dateBookDoctor) :
                new ObjectParameter("DateBookDoctor", typeof(System.DateTime));
    
            var dateShowStartParameter = dateShowStart.HasValue ?
                new ObjectParameter("DateShowStart", dateShowStart) :
                new ObjectParameter("DateShowStart", typeof(System.DateTime));
    
            var dateShowEndParameter = dateShowEnd.HasValue ?
                new ObjectParameter("DateShowEnd", dateShowEnd) :
                new ObjectParameter("DateShowEnd", typeof(System.DateTime));
    
            var timeStartParameter = timeStart.HasValue ?
                new ObjectParameter("TimeStart", timeStart) :
                new ObjectParameter("TimeStart", typeof(System.DateTime));
    
            var timeEndParameter = timeEnd.HasValue ?
                new ObjectParameter("TimeEnd", timeEnd) :
                new ObjectParameter("TimeEnd", typeof(System.DateTime));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var aParameter = a.HasValue ?
                new ObjectParameter("A", a) :
                new ObjectParameter("A", typeof(int));
    
            var rParameter = r.HasValue ?
                new ObjectParameter("R", r) :
                new ObjectParameter("R", typeof(int));
    
            var gParameter = g.HasValue ?
                new ObjectParameter("G", g) :
                new ObjectParameter("G", typeof(int));
    
            var bParameter = b.HasValue ?
                new ObjectParameter("B", b) :
                new ObjectParameter("B", typeof(int));
    
            var eNSaveParameter = eNSave != null ?
                new ObjectParameter("ENSave", eNSave) :
                new ObjectParameter("ENSave", typeof(string));
    
            var custNameParameter = custName != null ?
                new ObjectParameter("CustName", custName) :
                new ObjectParameter("CustName", typeof(string));
    
            var custIDParameter = custID != null ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(string));
    
            var treadmentParameter = treadment != null ?
                new ObjectParameter("Treadment", treadment) :
                new ObjectParameter("Treadment", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var drNameParameter = drName != null ?
                new ObjectParameter("DrName", drName) :
                new ObjectParameter("DrName", typeof(string));
    
            var drIDParameter = drID != null ?
                new ObjectParameter("DrID", drID) :
                new ObjectParameter("DrID", typeof(string));
    
            var howmagazineParameter = howmagazine != null ?
                new ObjectParameter("Howmagazine", howmagazine) :
                new ObjectParameter("Howmagazine", typeof(string));
    
            var howinternetParameter = howinternet != null ?
                new ObjectParameter("Howinternet", howinternet) :
                new ObjectParameter("Howinternet", typeof(string));
    
            var howfriendParameter = howfriend != null ?
                new ObjectParameter("Howfriend", howfriend) :
                new ObjectParameter("Howfriend", typeof(string));
    
            var hownewpaperParameter = hownewpaper != null ?
                new ObjectParameter("Hownewpaper", hownewpaper) :
                new ObjectParameter("Hownewpaper", typeof(string));
    
            var howTravelParameter = howTravel != null ?
                new ObjectParameter("HowTravel", howTravel) :
                new ObjectParameter("HowTravel", typeof(string));
    
            var howotherParameter = howother != null ?
                new ObjectParameter("Howother", howother) :
                new ObjectParameter("Howother", typeof(string));
    
            var howotherTextParameter = howotherText != null ?
                new ObjectParameter("HowotherText", howotherText) :
                new ObjectParameter("HowotherText", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var branchIDParameter = branchID != null ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(string));
    
            var whereDateParameter = whereDate != null ?
                new ObjectParameter("whereDate", whereDate) :
                new ObjectParameter("whereDate", typeof(string));
    
            var whereRoomTypParameter = whereRoomTyp != null ?
                new ObjectParameter("whereRoomTyp", whereRoomTyp) :
                new ObjectParameter("whereRoomTyp", typeof(string));
    
            var dateSaveParameter = dateSave.HasValue ?
                new ObjectParameter("DateSave", dateSave) :
                new ObjectParameter("DateSave", typeof(System.DateTime));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iDBookLinkParameter = iDBookLink.HasValue ?
                new ObjectParameter("IDBookLink", iDBookLink) :
                new ObjectParameter("IDBookLink", typeof(int));
    
            var addDateParameter = addDate.HasValue ?
                new ObjectParameter("AddDate", addDate) :
                new ObjectParameter("AddDate", typeof(int));
    
            var drBookIDParameter = drBookID.HasValue ?
                new ObjectParameter("DrBookID", drBookID) :
                new ObjectParameter("DrBookID", typeof(int));
    
            var dayFullNameParameter = dayFullName != null ?
                new ObjectParameter("DayFullName", dayFullName) :
                new ObjectParameter("DayFullName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BookingRoom_Result>("sp_BookingRoom", queryTypeParameter, tYPParameter, roomIDParameter, bookIDParameter, appointDateParameter, dateBookDoctorParameter, dateShowStartParameter, dateShowEndParameter, timeStartParameter, timeEndParameter, durationParameter, aParameter, rParameter, gParameter, bParameter, eNSaveParameter, custNameParameter, custIDParameter, treadmentParameter, mobileParameter, drNameParameter, drIDParameter, howmagazineParameter, howinternetParameter, howfriendParameter, hownewpaperParameter, howTravelParameter, howotherParameter, howotherTextParameter, noteParameter, branchIDParameter, whereDateParameter, whereRoomTypParameter, dateSaveParameter, iDParameter, iDBookLinkParameter, addDateParameter, drBookIDParameter, dayFullNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_Branch_Result> sp_Branch(string queryType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Branch_Result>("sp_Branch", queryTypeParameter);
        }
    
        public virtual int sp_ContactCustomer(string queryType, string cN, string prefixCode, string tname, string tsurName, string tNickname, string firstName, string middleName, string surname, string nickname, string gender, string mobile1, string mobile2, string tel1, string tel2, string relationFlag, string relationOther)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var prefixCodeParameter = prefixCode != null ?
                new ObjectParameter("PrefixCode", prefixCode) :
                new ObjectParameter("PrefixCode", typeof(string));
    
            var tnameParameter = tname != null ?
                new ObjectParameter("Tname", tname) :
                new ObjectParameter("Tname", typeof(string));
    
            var tsurNameParameter = tsurName != null ?
                new ObjectParameter("TsurName", tsurName) :
                new ObjectParameter("TsurName", typeof(string));
    
            var tNicknameParameter = tNickname != null ?
                new ObjectParameter("TNickname", tNickname) :
                new ObjectParameter("TNickname", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("Nickname", nickname) :
                new ObjectParameter("Nickname", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var mobile1Parameter = mobile1 != null ?
                new ObjectParameter("Mobile1", mobile1) :
                new ObjectParameter("Mobile1", typeof(string));
    
            var mobile2Parameter = mobile2 != null ?
                new ObjectParameter("Mobile2", mobile2) :
                new ObjectParameter("Mobile2", typeof(string));
    
            var tel1Parameter = tel1 != null ?
                new ObjectParameter("Tel1", tel1) :
                new ObjectParameter("Tel1", typeof(string));
    
            var tel2Parameter = tel2 != null ?
                new ObjectParameter("Tel2", tel2) :
                new ObjectParameter("Tel2", typeof(string));
    
            var relationFlagParameter = relationFlag != null ?
                new ObjectParameter("RelationFlag", relationFlag) :
                new ObjectParameter("RelationFlag", typeof(string));
    
            var relationOtherParameter = relationOther != null ?
                new ObjectParameter("RelationOther", relationOther) :
                new ObjectParameter("RelationOther", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ContactCustomer", queryTypeParameter, cNParameter, prefixCodeParameter, tnameParameter, tsurNameParameter, tNicknameParameter, firstNameParameter, middleNameParameter, surnameParameter, nicknameParameter, genderParameter, mobile1Parameter, mobile2Parameter, tel1Parameter, tel2Parameter, relationFlagParameter, relationOtherParameter);
        }
    
        public virtual ObjectResult<string> sp_CosmeticSurgery(string cN, string eye, string nose, string chest, string other, string createBy, Nullable<System.DateTime> createDate, string updateBy, Nullable<System.DateTime> updateDate, string queryType)
        {
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var eyeParameter = eye != null ?
                new ObjectParameter("Eye", eye) :
                new ObjectParameter("Eye", typeof(string));
    
            var noseParameter = nose != null ?
                new ObjectParameter("Nose", nose) :
                new ObjectParameter("Nose", typeof(string));
    
            var chestParameter = chest != null ?
                new ObjectParameter("Chest", chest) :
                new ObjectParameter("Chest", typeof(string));
    
            var otherParameter = other != null ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_CosmeticSurgery", cNParameter, eyeParameter, noseParameter, chestParameter, otherParameter, createByParameter, createDateParameter, updateByParameter, updateDateParameter, queryTypeParameter);
        }
    
        public virtual ObjectResult<string> sp_customer(string queryType, string eN, string eN_Save, string cN, Nullable<System.DateTime> dateregister, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string prefixCode, string tname, string tsurName, string tNickname, string firstName, string middleName, string surname, string nickname, Nullable<System.DateTime> dateBirth, string dateBirthOther, Nullable<int> age, string gender, Nullable<int> height, Nullable<int> weights, string nationality, string race, string mobile1, string mobile2, string tel1, string tel2, string e_mail, string addressId, string building, string soi, string road, string sub_districtCode, string districtCode, string provinceCode, string postcode, string passportNo, string idCard, string vipFlag, string remark, string allergyHistory, string underlyingDisease, string whereGotTreatment, string createBy, Nullable<System.DateTime> createDate, string updateBy, Nullable<System.DateTime> updateDate, string image, string customerType, string branchId, Nullable<int> row_start, Nullable<int> row_end, string agenMemID, string bloodPressure, string providerTypID, Nullable<int> credit_Bath, Nullable<int> credit_Day, string country_ID, string saleConsult, string mainOfficeCust, string branchCust, string branchAuth, string cUSTNAME, string celeb, string memID, string contactName, string contactFrom, string contactFB_IN_LineID, string interest, Nullable<System.DateTime> dateConnect, Nullable<System.DateTime> dateBooking, Nullable<decimal> closeBal, string iD, Nullable<bool> active)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var eNParameter = eN != null ?
                new ObjectParameter("EN", eN) :
                new ObjectParameter("EN", typeof(string));
    
            var eN_SaveParameter = eN_Save != null ?
                new ObjectParameter("EN_Save", eN_Save) :
                new ObjectParameter("EN_Save", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var dateregisterParameter = dateregister.HasValue ?
                new ObjectParameter("Dateregister", dateregister) :
                new ObjectParameter("Dateregister", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var prefixCodeParameter = prefixCode != null ?
                new ObjectParameter("PrefixCode", prefixCode) :
                new ObjectParameter("PrefixCode", typeof(string));
    
            var tnameParameter = tname != null ?
                new ObjectParameter("Tname", tname) :
                new ObjectParameter("Tname", typeof(string));
    
            var tsurNameParameter = tsurName != null ?
                new ObjectParameter("TsurName", tsurName) :
                new ObjectParameter("TsurName", typeof(string));
    
            var tNicknameParameter = tNickname != null ?
                new ObjectParameter("TNickname", tNickname) :
                new ObjectParameter("TNickname", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("Nickname", nickname) :
                new ObjectParameter("Nickname", typeof(string));
    
            var dateBirthParameter = dateBirth.HasValue ?
                new ObjectParameter("DateBirth", dateBirth) :
                new ObjectParameter("DateBirth", typeof(System.DateTime));
    
            var dateBirthOtherParameter = dateBirthOther != null ?
                new ObjectParameter("DateBirthOther", dateBirthOther) :
                new ObjectParameter("DateBirthOther", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var weightsParameter = weights.HasValue ?
                new ObjectParameter("Weights", weights) :
                new ObjectParameter("Weights", typeof(int));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var raceParameter = race != null ?
                new ObjectParameter("Race", race) :
                new ObjectParameter("Race", typeof(string));
    
            var mobile1Parameter = mobile1 != null ?
                new ObjectParameter("Mobile1", mobile1) :
                new ObjectParameter("Mobile1", typeof(string));
    
            var mobile2Parameter = mobile2 != null ?
                new ObjectParameter("Mobile2", mobile2) :
                new ObjectParameter("Mobile2", typeof(string));
    
            var tel1Parameter = tel1 != null ?
                new ObjectParameter("Tel1", tel1) :
                new ObjectParameter("Tel1", typeof(string));
    
            var tel2Parameter = tel2 != null ?
                new ObjectParameter("Tel2", tel2) :
                new ObjectParameter("Tel2", typeof(string));
    
            var e_mailParameter = e_mail != null ?
                new ObjectParameter("E_mail", e_mail) :
                new ObjectParameter("E_mail", typeof(string));
    
            var addressIdParameter = addressId != null ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var sub_districtCodeParameter = sub_districtCode != null ?
                new ObjectParameter("Sub_districtCode", sub_districtCode) :
                new ObjectParameter("Sub_districtCode", typeof(string));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var provinceCodeParameter = provinceCode != null ?
                new ObjectParameter("ProvinceCode", provinceCode) :
                new ObjectParameter("ProvinceCode", typeof(string));
    
            var postcodeParameter = postcode != null ?
                new ObjectParameter("Postcode", postcode) :
                new ObjectParameter("Postcode", typeof(string));
    
            var passportNoParameter = passportNo != null ?
                new ObjectParameter("PassportNo", passportNo) :
                new ObjectParameter("PassportNo", typeof(string));
    
            var idCardParameter = idCard != null ?
                new ObjectParameter("IdCard", idCard) :
                new ObjectParameter("IdCard", typeof(string));
    
            var vipFlagParameter = vipFlag != null ?
                new ObjectParameter("VipFlag", vipFlag) :
                new ObjectParameter("VipFlag", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var allergyHistoryParameter = allergyHistory != null ?
                new ObjectParameter("AllergyHistory", allergyHistory) :
                new ObjectParameter("AllergyHistory", typeof(string));
    
            var underlyingDiseaseParameter = underlyingDisease != null ?
                new ObjectParameter("UnderlyingDisease", underlyingDisease) :
                new ObjectParameter("UnderlyingDisease", typeof(string));
    
            var whereGotTreatmentParameter = whereGotTreatment != null ?
                new ObjectParameter("WhereGotTreatment", whereGotTreatment) :
                new ObjectParameter("WhereGotTreatment", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var row_startParameter = row_start.HasValue ?
                new ObjectParameter("row_start", row_start) :
                new ObjectParameter("row_start", typeof(int));
    
            var row_endParameter = row_end.HasValue ?
                new ObjectParameter("row_end", row_end) :
                new ObjectParameter("row_end", typeof(int));
    
            var agenMemIDParameter = agenMemID != null ?
                new ObjectParameter("AgenMemID", agenMemID) :
                new ObjectParameter("AgenMemID", typeof(string));
    
            var bloodPressureParameter = bloodPressure != null ?
                new ObjectParameter("BloodPressure", bloodPressure) :
                new ObjectParameter("BloodPressure", typeof(string));
    
            var providerTypIDParameter = providerTypID != null ?
                new ObjectParameter("ProviderTypID", providerTypID) :
                new ObjectParameter("ProviderTypID", typeof(string));
    
            var credit_BathParameter = credit_Bath.HasValue ?
                new ObjectParameter("Credit_Bath", credit_Bath) :
                new ObjectParameter("Credit_Bath", typeof(int));
    
            var credit_DayParameter = credit_Day.HasValue ?
                new ObjectParameter("Credit_Day", credit_Day) :
                new ObjectParameter("Credit_Day", typeof(int));
    
            var country_IDParameter = country_ID != null ?
                new ObjectParameter("Country_ID", country_ID) :
                new ObjectParameter("Country_ID", typeof(string));
    
            var saleConsultParameter = saleConsult != null ?
                new ObjectParameter("SaleConsult", saleConsult) :
                new ObjectParameter("SaleConsult", typeof(string));
    
            var mainOfficeCustParameter = mainOfficeCust != null ?
                new ObjectParameter("MainOfficeCust", mainOfficeCust) :
                new ObjectParameter("MainOfficeCust", typeof(string));
    
            var branchCustParameter = branchCust != null ?
                new ObjectParameter("BranchCust", branchCust) :
                new ObjectParameter("BranchCust", typeof(string));
    
            var branchAuthParameter = branchAuth != null ?
                new ObjectParameter("BranchAuth", branchAuth) :
                new ObjectParameter("BranchAuth", typeof(string));
    
            var cUSTNAMEParameter = cUSTNAME != null ?
                new ObjectParameter("CUSTNAME", cUSTNAME) :
                new ObjectParameter("CUSTNAME", typeof(string));
    
            var celebParameter = celeb != null ?
                new ObjectParameter("Celeb", celeb) :
                new ObjectParameter("Celeb", typeof(string));
    
            var memIDParameter = memID != null ?
                new ObjectParameter("MemID", memID) :
                new ObjectParameter("MemID", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var contactFromParameter = contactFrom != null ?
                new ObjectParameter("ContactFrom", contactFrom) :
                new ObjectParameter("ContactFrom", typeof(string));
    
            var contactFB_IN_LineIDParameter = contactFB_IN_LineID != null ?
                new ObjectParameter("ContactFB_IN_LineID", contactFB_IN_LineID) :
                new ObjectParameter("ContactFB_IN_LineID", typeof(string));
    
            var interestParameter = interest != null ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(string));
    
            var dateConnectParameter = dateConnect.HasValue ?
                new ObjectParameter("DateConnect", dateConnect) :
                new ObjectParameter("DateConnect", typeof(System.DateTime));
    
            var dateBookingParameter = dateBooking.HasValue ?
                new ObjectParameter("DateBooking", dateBooking) :
                new ObjectParameter("DateBooking", typeof(System.DateTime));
    
            var closeBalParameter = closeBal.HasValue ?
                new ObjectParameter("CloseBal", closeBal) :
                new ObjectParameter("CloseBal", typeof(decimal));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_customer", queryTypeParameter, eNParameter, eN_SaveParameter, cNParameter, dateregisterParameter, startDateParameter, endDateParameter, prefixCodeParameter, tnameParameter, tsurNameParameter, tNicknameParameter, firstNameParameter, middleNameParameter, surnameParameter, nicknameParameter, dateBirthParameter, dateBirthOtherParameter, ageParameter, genderParameter, heightParameter, weightsParameter, nationalityParameter, raceParameter, mobile1Parameter, mobile2Parameter, tel1Parameter, tel2Parameter, e_mailParameter, addressIdParameter, buildingParameter, soiParameter, roadParameter, sub_districtCodeParameter, districtCodeParameter, provinceCodeParameter, postcodeParameter, passportNoParameter, idCardParameter, vipFlagParameter, remarkParameter, allergyHistoryParameter, underlyingDiseaseParameter, whereGotTreatmentParameter, createByParameter, createDateParameter, updateByParameter, updateDateParameter, imageParameter, customerTypeParameter, branchIdParameter, row_startParameter, row_endParameter, agenMemIDParameter, bloodPressureParameter, providerTypIDParameter, credit_BathParameter, credit_DayParameter, country_IDParameter, saleConsultParameter, mainOfficeCustParameter, branchCustParameter, branchAuthParameter, cUSTNAMEParameter, celebParameter, memIDParameter, contactNameParameter, contactFromParameter, contactFB_IN_LineIDParameter, interestParameter, dateConnectParameter, dateBookingParameter, closeBalParameter, iDParameter, activeParameter);
        }
    
        public virtual ObjectResult<string> sp_CustProvider(string typeCustomer, string queryType)
        {
            var typeCustomerParameter = typeCustomer != null ?
                new ObjectParameter("TypeCustomer", typeCustomer) :
                new ObjectParameter("TypeCustomer", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_CustProvider", typeCustomerParameter, queryTypeParameter);
        }
    
        public virtual ObjectResult<string> sp_gendocno(string docPrefix, string branchID, string whereValue, string sono, string vN, string cN, ObjectParameter docNoOut)
        {
            var docPrefixParameter = docPrefix != null ?
                new ObjectParameter("DocPrefix", docPrefix) :
                new ObjectParameter("DocPrefix", typeof(string));
    
            var branchIDParameter = branchID != null ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(string));
    
            var whereValueParameter = whereValue != null ?
                new ObjectParameter("WhereValue", whereValue) :
                new ObjectParameter("WhereValue", typeof(string));
    
            var sonoParameter = sono != null ?
                new ObjectParameter("Sono", sono) :
                new ObjectParameter("Sono", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_gendocno", docPrefixParameter, branchIDParameter, whereValueParameter, sonoParameter, vNParameter, cNParameter, docNoOut);
        }
    
        public virtual ObjectResult<sp_GetReportList_Result> sp_GetReportList(string queryType, string reportType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReportList_Result>("sp_GetReportList", queryTypeParameter, reportTypeParameter);
        }
    
        public virtual ObjectResult<string> sp_GiftVoucher_Barter(string queryType, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, string giftDetail, string giftCode, Nullable<decimal> priceCredit, string gift_Active, Nullable<int> row_start, Nullable<int> row_end, string barterDetail, string barterCode, string barter_Active, string sql, string cN, string eN, string eNApp, string remark, string mS_Code, string listOrder, string sono, string mS_CodeFIX, string giftType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var giftDetailParameter = giftDetail != null ?
                new ObjectParameter("GiftDetail", giftDetail) :
                new ObjectParameter("GiftDetail", typeof(string));
    
            var giftCodeParameter = giftCode != null ?
                new ObjectParameter("GiftCode", giftCode) :
                new ObjectParameter("GiftCode", typeof(string));
    
            var priceCreditParameter = priceCredit.HasValue ?
                new ObjectParameter("PriceCredit", priceCredit) :
                new ObjectParameter("PriceCredit", typeof(decimal));
    
            var gift_ActiveParameter = gift_Active != null ?
                new ObjectParameter("Gift_Active", gift_Active) :
                new ObjectParameter("Gift_Active", typeof(string));
    
            var row_startParameter = row_start.HasValue ?
                new ObjectParameter("row_start", row_start) :
                new ObjectParameter("row_start", typeof(int));
    
            var row_endParameter = row_end.HasValue ?
                new ObjectParameter("row_end", row_end) :
                new ObjectParameter("row_end", typeof(int));
    
            var barterDetailParameter = barterDetail != null ?
                new ObjectParameter("BarterDetail", barterDetail) :
                new ObjectParameter("BarterDetail", typeof(string));
    
            var barterCodeParameter = barterCode != null ?
                new ObjectParameter("BarterCode", barterCode) :
                new ObjectParameter("BarterCode", typeof(string));
    
            var barter_ActiveParameter = barter_Active != null ?
                new ObjectParameter("Barter_Active", barter_Active) :
                new ObjectParameter("Barter_Active", typeof(string));
    
            var sqlParameter = sql != null ?
                new ObjectParameter("sql", sql) :
                new ObjectParameter("sql", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var eNParameter = eN != null ?
                new ObjectParameter("EN", eN) :
                new ObjectParameter("EN", typeof(string));
    
            var eNAppParameter = eNApp != null ?
                new ObjectParameter("ENApp", eNApp) :
                new ObjectParameter("ENApp", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var listOrderParameter = listOrder != null ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(string));
    
            var sonoParameter = sono != null ?
                new ObjectParameter("Sono", sono) :
                new ObjectParameter("Sono", typeof(string));
    
            var mS_CodeFIXParameter = mS_CodeFIX != null ?
                new ObjectParameter("MS_CodeFIX", mS_CodeFIX) :
                new ObjectParameter("MS_CodeFIX", typeof(string));
    
            var giftTypeParameter = giftType != null ?
                new ObjectParameter("GiftType", giftType) :
                new ObjectParameter("GiftType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GiftVoucher_Barter", queryTypeParameter, dateStartParameter, dateEndParameter, giftDetailParameter, giftCodeParameter, priceCreditParameter, gift_ActiveParameter, row_startParameter, row_endParameter, barterDetailParameter, barterCodeParameter, barter_ActiveParameter, sqlParameter, cNParameter, eNParameter, eNAppParameter, remarkParameter, mS_CodeParameter, listOrderParameter, sonoParameter, mS_CodeFIXParameter, giftTypeParameter);
        }
    
        public virtual ObjectResult<string> sp_HairCenter(string cN, string hairTransplantation, string hairReform, string hairOther, string createBy, Nullable<System.DateTime> createDate, string updateBy, Nullable<System.DateTime> updateDate, string queryType)
        {
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var hairTransplantationParameter = hairTransplantation != null ?
                new ObjectParameter("HairTransplantation", hairTransplantation) :
                new ObjectParameter("HairTransplantation", typeof(string));
    
            var hairReformParameter = hairReform != null ?
                new ObjectParameter("HairReform", hairReform) :
                new ObjectParameter("HairReform", typeof(string));
    
            var hairOtherParameter = hairOther != null ?
                new ObjectParameter("HairOther", hairOther) :
                new ObjectParameter("HairOther", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_HairCenter", cNParameter, hairTransplantationParameter, hairReformParameter, hairOtherParameter, createByParameter, createDateParameter, updateByParameter, updateDateParameter, queryTypeParameter);
        }
    
        public virtual ObjectResult<string> sp_HowYouhear(string cN, string sOno, string newspaper, string magazine, string internet, string friend, string travelthrough, string howYouhearOther, string facebook, string instagram, string sms, string lineAt, string line, string taxi, string tV, string callIn, string agency, string queryType, string agencyOPD)
        {
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var sOnoParameter = sOno != null ?
                new ObjectParameter("SOno", sOno) :
                new ObjectParameter("SOno", typeof(string));
    
            var newspaperParameter = newspaper != null ?
                new ObjectParameter("Newspaper", newspaper) :
                new ObjectParameter("Newspaper", typeof(string));
    
            var magazineParameter = magazine != null ?
                new ObjectParameter("Magazine", magazine) :
                new ObjectParameter("Magazine", typeof(string));
    
            var internetParameter = internet != null ?
                new ObjectParameter("Internet", internet) :
                new ObjectParameter("Internet", typeof(string));
    
            var friendParameter = friend != null ?
                new ObjectParameter("Friend", friend) :
                new ObjectParameter("Friend", typeof(string));
    
            var travelthroughParameter = travelthrough != null ?
                new ObjectParameter("Travelthrough", travelthrough) :
                new ObjectParameter("Travelthrough", typeof(string));
    
            var howYouhearOtherParameter = howYouhearOther != null ?
                new ObjectParameter("HowYouhearOther", howYouhearOther) :
                new ObjectParameter("HowYouhearOther", typeof(string));
    
            var facebookParameter = facebook != null ?
                new ObjectParameter("Facebook", facebook) :
                new ObjectParameter("Facebook", typeof(string));
    
            var instagramParameter = instagram != null ?
                new ObjectParameter("Instagram", instagram) :
                new ObjectParameter("Instagram", typeof(string));
    
            var smsParameter = sms != null ?
                new ObjectParameter("Sms", sms) :
                new ObjectParameter("Sms", typeof(string));
    
            var lineAtParameter = lineAt != null ?
                new ObjectParameter("LineAt", lineAt) :
                new ObjectParameter("LineAt", typeof(string));
    
            var lineParameter = line != null ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(string));
    
            var taxiParameter = taxi != null ?
                new ObjectParameter("Taxi", taxi) :
                new ObjectParameter("Taxi", typeof(string));
    
            var tVParameter = tV != null ?
                new ObjectParameter("TV", tV) :
                new ObjectParameter("TV", typeof(string));
    
            var callInParameter = callIn != null ?
                new ObjectParameter("CallIn", callIn) :
                new ObjectParameter("CallIn", typeof(string));
    
            var agencyParameter = agency != null ?
                new ObjectParameter("Agency", agency) :
                new ObjectParameter("Agency", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var agencyOPDParameter = agencyOPD != null ?
                new ObjectParameter("AgencyOPD", agencyOPD) :
                new ObjectParameter("AgencyOPD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_HowYouhear", cNParameter, sOnoParameter, newspaperParameter, magazineParameter, internetParameter, friendParameter, travelthroughParameter, howYouhearOtherParameter, facebookParameter, instagramParameter, smsParameter, lineAtParameter, lineParameter, taxiParameter, tVParameter, callInParameter, agencyParameter, queryTypeParameter, agencyOPDParameter);
        }
    
        public virtual int sp_Jobcost(string queryTypeJ, string sOJ, string vNJ, string mS_CodeJ, string listOrderJ, Nullable<decimal> priceAfterDisJ)
        {
            var queryTypeJParameter = queryTypeJ != null ?
                new ObjectParameter("QueryTypeJ", queryTypeJ) :
                new ObjectParameter("QueryTypeJ", typeof(string));
    
            var sOJParameter = sOJ != null ?
                new ObjectParameter("SOJ", sOJ) :
                new ObjectParameter("SOJ", typeof(string));
    
            var vNJParameter = vNJ != null ?
                new ObjectParameter("VNJ", vNJ) :
                new ObjectParameter("VNJ", typeof(string));
    
            var mS_CodeJParameter = mS_CodeJ != null ?
                new ObjectParameter("MS_CodeJ", mS_CodeJ) :
                new ObjectParameter("MS_CodeJ", typeof(string));
    
            var listOrderJParameter = listOrderJ != null ?
                new ObjectParameter("ListOrderJ", listOrderJ) :
                new ObjectParameter("ListOrderJ", typeof(string));
    
            var priceAfterDisJParameter = priceAfterDisJ.HasValue ?
                new ObjectParameter("PriceAfterDisJ", priceAfterDisJ) :
                new ObjectParameter("PriceAfterDisJ", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Jobcost", queryTypeJParameter, sOJParameter, vNJParameter, mS_CodeJParameter, listOrderJParameter, priceAfterDisJParameter);
        }
    
        public virtual ObjectResult<sp_Marketing_Result> sp_Marketing(string queryType, string creditCashQueryType, string vN, string eN, string sOT_Code, string cN, string sOno, string rCNo, string medStatus_Code, Nullable<decimal> receiptBath, Nullable<decimal> iNVBath, string vat, string nonVat, Nullable<System.DateTime> receiptDate, Nullable<System.DateTime> dateSave, Nullable<System.DateTime> dateUpdate, Nullable<decimal> salePrice, Nullable<decimal> discount, Nullable<decimal> earnestMoney, Nullable<decimal> netAmount, Nullable<decimal> unpaid, Nullable<decimal> discountPercen, Nullable<int> discountBathByItem, Nullable<decimal> discountBath, string remark, Nullable<decimal> payByItem, string pay_Code, string cD_Code, string cardNumber, Nullable<decimal> cashMoney, Nullable<decimal> priceAfterDis, Nullable<int> payInID, string bankName, Nullable<int> count, string mS_Code, string sUR_ID, string eN_Save, string eN_COMS, string eN_COMS2, Nullable<decimal> com_Bath, Nullable<decimal> com_Bath2, string reCeiptNo, string invNo, string cardType, string billTo, string listOrder, string sORefAccount, string birthMonth, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var creditCashQueryTypeParameter = creditCashQueryType != null ?
                new ObjectParameter("CreditCashQueryType", creditCashQueryType) :
                new ObjectParameter("CreditCashQueryType", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var eNParameter = eN != null ?
                new ObjectParameter("EN", eN) :
                new ObjectParameter("EN", typeof(string));
    
            var sOT_CodeParameter = sOT_Code != null ?
                new ObjectParameter("SOT_Code", sOT_Code) :
                new ObjectParameter("SOT_Code", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var sOnoParameter = sOno != null ?
                new ObjectParameter("SOno", sOno) :
                new ObjectParameter("SOno", typeof(string));
    
            var rCNoParameter = rCNo != null ?
                new ObjectParameter("RCNo", rCNo) :
                new ObjectParameter("RCNo", typeof(string));
    
            var medStatus_CodeParameter = medStatus_Code != null ?
                new ObjectParameter("MedStatus_Code", medStatus_Code) :
                new ObjectParameter("MedStatus_Code", typeof(string));
    
            var receiptBathParameter = receiptBath.HasValue ?
                new ObjectParameter("ReceiptBath", receiptBath) :
                new ObjectParameter("ReceiptBath", typeof(decimal));
    
            var iNVBathParameter = iNVBath.HasValue ?
                new ObjectParameter("INVBath", iNVBath) :
                new ObjectParameter("INVBath", typeof(decimal));
    
            var vatParameter = vat != null ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(string));
    
            var nonVatParameter = nonVat != null ?
                new ObjectParameter("NonVat", nonVat) :
                new ObjectParameter("NonVat", typeof(string));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var dateSaveParameter = dateSave.HasValue ?
                new ObjectParameter("DateSave", dateSave) :
                new ObjectParameter("DateSave", typeof(System.DateTime));
    
            var dateUpdateParameter = dateUpdate.HasValue ?
                new ObjectParameter("DateUpdate", dateUpdate) :
                new ObjectParameter("DateUpdate", typeof(System.DateTime));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var earnestMoneyParameter = earnestMoney.HasValue ?
                new ObjectParameter("EarnestMoney", earnestMoney) :
                new ObjectParameter("EarnestMoney", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var unpaidParameter = unpaid.HasValue ?
                new ObjectParameter("Unpaid", unpaid) :
                new ObjectParameter("Unpaid", typeof(decimal));
    
            var discountPercenParameter = discountPercen.HasValue ?
                new ObjectParameter("DiscountPercen", discountPercen) :
                new ObjectParameter("DiscountPercen", typeof(decimal));
    
            var discountBathByItemParameter = discountBathByItem.HasValue ?
                new ObjectParameter("DiscountBathByItem", discountBathByItem) :
                new ObjectParameter("DiscountBathByItem", typeof(int));
    
            var discountBathParameter = discountBath.HasValue ?
                new ObjectParameter("DiscountBath", discountBath) :
                new ObjectParameter("DiscountBath", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var payByItemParameter = payByItem.HasValue ?
                new ObjectParameter("PayByItem", payByItem) :
                new ObjectParameter("PayByItem", typeof(decimal));
    
            var pay_CodeParameter = pay_Code != null ?
                new ObjectParameter("Pay_Code", pay_Code) :
                new ObjectParameter("Pay_Code", typeof(string));
    
            var cD_CodeParameter = cD_Code != null ?
                new ObjectParameter("CD_Code", cD_Code) :
                new ObjectParameter("CD_Code", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var cashMoneyParameter = cashMoney.HasValue ?
                new ObjectParameter("CashMoney", cashMoney) :
                new ObjectParameter("CashMoney", typeof(decimal));
    
            var priceAfterDisParameter = priceAfterDis.HasValue ?
                new ObjectParameter("PriceAfterDis", priceAfterDis) :
                new ObjectParameter("PriceAfterDis", typeof(decimal));
    
            var payInIDParameter = payInID.HasValue ?
                new ObjectParameter("PayInID", payInID) :
                new ObjectParameter("PayInID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var sUR_IDParameter = sUR_ID != null ?
                new ObjectParameter("SUR_ID", sUR_ID) :
                new ObjectParameter("SUR_ID", typeof(string));
    
            var eN_SaveParameter = eN_Save != null ?
                new ObjectParameter("EN_Save", eN_Save) :
                new ObjectParameter("EN_Save", typeof(string));
    
            var eN_COMSParameter = eN_COMS != null ?
                new ObjectParameter("EN_COMS", eN_COMS) :
                new ObjectParameter("EN_COMS", typeof(string));
    
            var eN_COMS2Parameter = eN_COMS2 != null ?
                new ObjectParameter("EN_COMS2", eN_COMS2) :
                new ObjectParameter("EN_COMS2", typeof(string));
    
            var com_BathParameter = com_Bath.HasValue ?
                new ObjectParameter("Com_Bath", com_Bath) :
                new ObjectParameter("Com_Bath", typeof(decimal));
    
            var com_Bath2Parameter = com_Bath2.HasValue ?
                new ObjectParameter("Com_Bath2", com_Bath2) :
                new ObjectParameter("Com_Bath2", typeof(decimal));
    
            var reCeiptNoParameter = reCeiptNo != null ?
                new ObjectParameter("ReCeiptNo", reCeiptNo) :
                new ObjectParameter("ReCeiptNo", typeof(string));
    
            var invNoParameter = invNo != null ?
                new ObjectParameter("InvNo", invNo) :
                new ObjectParameter("InvNo", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var billToParameter = billTo != null ?
                new ObjectParameter("BillTo", billTo) :
                new ObjectParameter("BillTo", typeof(string));
    
            var listOrderParameter = listOrder != null ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(string));
    
            var sORefAccountParameter = sORefAccount != null ?
                new ObjectParameter("SORefAccount", sORefAccount) :
                new ObjectParameter("SORefAccount", typeof(string));
    
            var birthMonthParameter = birthMonth != null ?
                new ObjectParameter("BirthMonth", birthMonth) :
                new ObjectParameter("BirthMonth", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Marketing_Result>("sp_Marketing", queryTypeParameter, creditCashQueryTypeParameter, vNParameter, eNParameter, sOT_CodeParameter, cNParameter, sOnoParameter, rCNoParameter, medStatus_CodeParameter, receiptBathParameter, iNVBathParameter, vatParameter, nonVatParameter, receiptDateParameter, dateSaveParameter, dateUpdateParameter, salePriceParameter, discountParameter, earnestMoneyParameter, netAmountParameter, unpaidParameter, discountPercenParameter, discountBathByItemParameter, discountBathParameter, remarkParameter, payByItemParameter, pay_CodeParameter, cD_CodeParameter, cardNumberParameter, cashMoneyParameter, priceAfterDisParameter, payInIDParameter, bankNameParameter, countParameter, mS_CodeParameter, sUR_IDParameter, eN_SaveParameter, eN_COMSParameter, eN_COMS2Parameter, com_BathParameter, com_Bath2Parameter, reCeiptNoParameter, invNoParameter, cardTypeParameter, billToParameter, listOrderParameter, sORefAccountParameter, birthMonthParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<string> sp_MedicalOrder(string vN, string vNClose, string sOClose, string sONew, string cN, string cO, string eN_Save, string remark, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string queryType, Nullable<decimal> salePrice, Nullable<decimal> priceTotalRef, Nullable<decimal> priceCreditRef, Nullable<int> row_start, Nullable<int> row_end, string tName, string tSurname, string tab, string mS_Name, string mS_Code, string tabwhere, string medStatus_Code, string medStatus_CodeNew, string medStatus_CodePending, string medStatus_CodeClosed, string medStatus_CodeUnpaid, string medStatus_CodeDeposit, string medStatus_CodePaid, string moneyCheckComplete, string agenMemID, string sONo, string eN_COMS1, string eN_COMS2, string dR_COM, string note, string mOType, string pRO_Code, string sORef, string oldKey, string product, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string refMO, string refVN, string branchId, string notes, Nullable<decimal> proCreditRemain)
        {
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var vNCloseParameter = vNClose != null ?
                new ObjectParameter("VNClose", vNClose) :
                new ObjectParameter("VNClose", typeof(string));
    
            var sOCloseParameter = sOClose != null ?
                new ObjectParameter("SOClose", sOClose) :
                new ObjectParameter("SOClose", typeof(string));
    
            var sONewParameter = sONew != null ?
                new ObjectParameter("SONew", sONew) :
                new ObjectParameter("SONew", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var cOParameter = cO != null ?
                new ObjectParameter("CO", cO) :
                new ObjectParameter("CO", typeof(string));
    
            var eN_SaveParameter = eN_Save != null ?
                new ObjectParameter("EN_Save", eN_Save) :
                new ObjectParameter("EN_Save", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var priceTotalRefParameter = priceTotalRef.HasValue ?
                new ObjectParameter("PriceTotalRef", priceTotalRef) :
                new ObjectParameter("PriceTotalRef", typeof(decimal));
    
            var priceCreditRefParameter = priceCreditRef.HasValue ?
                new ObjectParameter("PriceCreditRef", priceCreditRef) :
                new ObjectParameter("PriceCreditRef", typeof(decimal));
    
            var row_startParameter = row_start.HasValue ?
                new ObjectParameter("row_start", row_start) :
                new ObjectParameter("row_start", typeof(int));
    
            var row_endParameter = row_end.HasValue ?
                new ObjectParameter("row_end", row_end) :
                new ObjectParameter("row_end", typeof(int));
    
            var tNameParameter = tName != null ?
                new ObjectParameter("TName", tName) :
                new ObjectParameter("TName", typeof(string));
    
            var tSurnameParameter = tSurname != null ?
                new ObjectParameter("TSurname", tSurname) :
                new ObjectParameter("TSurname", typeof(string));
    
            var tabParameter = tab != null ?
                new ObjectParameter("Tab", tab) :
                new ObjectParameter("Tab", typeof(string));
    
            var mS_NameParameter = mS_Name != null ?
                new ObjectParameter("MS_Name", mS_Name) :
                new ObjectParameter("MS_Name", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var tabwhereParameter = tabwhere != null ?
                new ObjectParameter("Tabwhere", tabwhere) :
                new ObjectParameter("Tabwhere", typeof(string));
    
            var medStatus_CodeParameter = medStatus_Code != null ?
                new ObjectParameter("MedStatus_Code", medStatus_Code) :
                new ObjectParameter("MedStatus_Code", typeof(string));
    
            var medStatus_CodeNewParameter = medStatus_CodeNew != null ?
                new ObjectParameter("MedStatus_CodeNew", medStatus_CodeNew) :
                new ObjectParameter("MedStatus_CodeNew", typeof(string));
    
            var medStatus_CodePendingParameter = medStatus_CodePending != null ?
                new ObjectParameter("MedStatus_CodePending", medStatus_CodePending) :
                new ObjectParameter("MedStatus_CodePending", typeof(string));
    
            var medStatus_CodeClosedParameter = medStatus_CodeClosed != null ?
                new ObjectParameter("MedStatus_CodeClosed", medStatus_CodeClosed) :
                new ObjectParameter("MedStatus_CodeClosed", typeof(string));
    
            var medStatus_CodeUnpaidParameter = medStatus_CodeUnpaid != null ?
                new ObjectParameter("MedStatus_CodeUnpaid", medStatus_CodeUnpaid) :
                new ObjectParameter("MedStatus_CodeUnpaid", typeof(string));
    
            var medStatus_CodeDepositParameter = medStatus_CodeDeposit != null ?
                new ObjectParameter("MedStatus_CodeDeposit", medStatus_CodeDeposit) :
                new ObjectParameter("MedStatus_CodeDeposit", typeof(string));
    
            var medStatus_CodePaidParameter = medStatus_CodePaid != null ?
                new ObjectParameter("MedStatus_CodePaid", medStatus_CodePaid) :
                new ObjectParameter("MedStatus_CodePaid", typeof(string));
    
            var moneyCheckCompleteParameter = moneyCheckComplete != null ?
                new ObjectParameter("MoneyCheckComplete", moneyCheckComplete) :
                new ObjectParameter("MoneyCheckComplete", typeof(string));
    
            var agenMemIDParameter = agenMemID != null ?
                new ObjectParameter("AgenMemID", agenMemID) :
                new ObjectParameter("AgenMemID", typeof(string));
    
            var sONoParameter = sONo != null ?
                new ObjectParameter("SONo", sONo) :
                new ObjectParameter("SONo", typeof(string));
    
            var eN_COMS1Parameter = eN_COMS1 != null ?
                new ObjectParameter("EN_COMS1", eN_COMS1) :
                new ObjectParameter("EN_COMS1", typeof(string));
    
            var eN_COMS2Parameter = eN_COMS2 != null ?
                new ObjectParameter("EN_COMS2", eN_COMS2) :
                new ObjectParameter("EN_COMS2", typeof(string));
    
            var dR_COMParameter = dR_COM != null ?
                new ObjectParameter("DR_COM", dR_COM) :
                new ObjectParameter("DR_COM", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var mOTypeParameter = mOType != null ?
                new ObjectParameter("MOType", mOType) :
                new ObjectParameter("MOType", typeof(string));
    
            var pRO_CodeParameter = pRO_Code != null ?
                new ObjectParameter("PRO_Code", pRO_Code) :
                new ObjectParameter("PRO_Code", typeof(string));
    
            var sORefParameter = sORef != null ?
                new ObjectParameter("SORef", sORef) :
                new ObjectParameter("SORef", typeof(string));
    
            var oldKeyParameter = oldKey != null ?
                new ObjectParameter("OldKey", oldKey) :
                new ObjectParameter("OldKey", typeof(string));
    
            var productParameter = product != null ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var refMOParameter = refMO != null ?
                new ObjectParameter("RefMO", refMO) :
                new ObjectParameter("RefMO", typeof(string));
    
            var refVNParameter = refVN != null ?
                new ObjectParameter("RefVN", refVN) :
                new ObjectParameter("RefVN", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var proCreditRemainParameter = proCreditRemain.HasValue ?
                new ObjectParameter("ProCreditRemain", proCreditRemain) :
                new ObjectParameter("ProCreditRemain", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_MedicalOrder", vNParameter, vNCloseParameter, sOCloseParameter, sONewParameter, cNParameter, cOParameter, eN_SaveParameter, remarkParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, queryTypeParameter, salePriceParameter, priceTotalRefParameter, priceCreditRefParameter, row_startParameter, row_endParameter, tNameParameter, tSurnameParameter, tabParameter, mS_NameParameter, mS_CodeParameter, tabwhereParameter, medStatus_CodeParameter, medStatus_CodeNewParameter, medStatus_CodePendingParameter, medStatus_CodeClosedParameter, medStatus_CodeUnpaidParameter, medStatus_CodeDepositParameter, medStatus_CodePaidParameter, moneyCheckCompleteParameter, agenMemIDParameter, sONoParameter, eN_COMS1Parameter, eN_COMS2Parameter, dR_COMParameter, noteParameter, mOTypeParameter, pRO_CodeParameter, sORefParameter, oldKeyParameter, productParameter, startDateParameter, endDateParameter, refMOParameter, refVNParameter, branchIdParameter, notesParameter, proCreditRemainParameter);
        }
    
        public virtual int sp_MedicalOrderDoc(string id, string vN, string sono, string fileName, string detail, string queryType, string useTransId, string cN, Nullable<System.DateTime> dateScan, string eNDoctor, string eNSave)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var sonoParameter = sono != null ?
                new ObjectParameter("Sono", sono) :
                new ObjectParameter("Sono", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var useTransIdParameter = useTransId != null ?
                new ObjectParameter("UseTransId", useTransId) :
                new ObjectParameter("UseTransId", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var dateScanParameter = dateScan.HasValue ?
                new ObjectParameter("DateScan", dateScan) :
                new ObjectParameter("DateScan", typeof(System.DateTime));
    
            var eNDoctorParameter = eNDoctor != null ?
                new ObjectParameter("ENDoctor", eNDoctor) :
                new ObjectParameter("ENDoctor", typeof(string));
    
            var eNSaveParameter = eNSave != null ?
                new ObjectParameter("ENSave", eNSave) :
                new ObjectParameter("ENSave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MedicalOrderDoc", idParameter, vNParameter, sonoParameter, fileNameParameter, detailParameter, queryTypeParameter, useTransIdParameter, cNParameter, dateScanParameter, eNDoctorParameter, eNSaveParameter);
        }
    
        public virtual ObjectResult<string> sp_MedicalOrderMoveTran(string queryType, string mS_Code, string sOClose, string sO_Old, string sONew, string cN, Nullable<decimal> priceTotal, Nullable<decimal> priceNewVN, Nullable<decimal> priceNewBalance, string remark, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, Nullable<decimal> price, Nullable<bool> payCash, Nullable<bool> payUse, string isCancel)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var sOCloseParameter = sOClose != null ?
                new ObjectParameter("SOClose", sOClose) :
                new ObjectParameter("SOClose", typeof(string));
    
            var sO_OldParameter = sO_Old != null ?
                new ObjectParameter("SO_Old", sO_Old) :
                new ObjectParameter("SO_Old", typeof(string));
    
            var sONewParameter = sONew != null ?
                new ObjectParameter("SONew", sONew) :
                new ObjectParameter("SONew", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var priceTotalParameter = priceTotal.HasValue ?
                new ObjectParameter("PriceTotal", priceTotal) :
                new ObjectParameter("PriceTotal", typeof(decimal));
    
            var priceNewVNParameter = priceNewVN.HasValue ?
                new ObjectParameter("PriceNewVN", priceNewVN) :
                new ObjectParameter("PriceNewVN", typeof(decimal));
    
            var priceNewBalanceParameter = priceNewBalance.HasValue ?
                new ObjectParameter("PriceNewBalance", priceNewBalance) :
                new ObjectParameter("PriceNewBalance", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var payCashParameter = payCash.HasValue ?
                new ObjectParameter("PayCash", payCash) :
                new ObjectParameter("PayCash", typeof(bool));
    
            var payUseParameter = payUse.HasValue ?
                new ObjectParameter("PayUse", payUse) :
                new ObjectParameter("PayUse", typeof(bool));
    
            var isCancelParameter = isCancel != null ?
                new ObjectParameter("IsCancel", isCancel) :
                new ObjectParameter("IsCancel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_MedicalOrderMoveTran", queryTypeParameter, mS_CodeParameter, sOCloseParameter, sO_OldParameter, sONewParameter, cNParameter, priceTotalParameter, priceNewVNParameter, priceNewBalanceParameter, remarkParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, priceParameter, payCashParameter, payUseParameter, isCancelParameter);
        }
    
        public virtual ObjectResult<string> sp_MedicalOrderUseStatus(string vN_)
        {
            var vN_Parameter = vN_ != null ?
                new ObjectParameter("VN_", vN_) :
                new ObjectParameter("VN_", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_MedicalOrderUseStatus", vN_Parameter);
        }
    
        public virtual ObjectResult<string> sp_MedicalOrderUseTrans(string queryType, string id, string vN, string cN, string mS_Code, Nullable<decimal> amountOfUse, Nullable<decimal> amountTotal, Nullable<System.DateTime> dateOfUse, string createBy, Nullable<System.DateTime> createDate, string updateBy, Nullable<System.DateTime> updateDate, string cN_USED, string cO, string sO, string sono, string refMO, string listOrder, string remark, Nullable<decimal> feeRate, Nullable<decimal> feeRate2, string swap, string flagUse, string branchId, Nullable<decimal> priceAfterDis, string usedID, string eN_REQ, string eN_Helper, string courseCardID, string printCard, string printSlip, string isUpdated, Nullable<decimal> printLineOrder, Nullable<decimal> shot, string giftCode, Nullable<decimal> amountBalance)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var amountOfUseParameter = amountOfUse.HasValue ?
                new ObjectParameter("AmountOfUse", amountOfUse) :
                new ObjectParameter("AmountOfUse", typeof(decimal));
    
            var amountTotalParameter = amountTotal.HasValue ?
                new ObjectParameter("AmountTotal", amountTotal) :
                new ObjectParameter("AmountTotal", typeof(decimal));
    
            var dateOfUseParameter = dateOfUse.HasValue ?
                new ObjectParameter("DateOfUse", dateOfUse) :
                new ObjectParameter("DateOfUse", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var cN_USEDParameter = cN_USED != null ?
                new ObjectParameter("CN_USED", cN_USED) :
                new ObjectParameter("CN_USED", typeof(string));
    
            var cOParameter = cO != null ?
                new ObjectParameter("CO", cO) :
                new ObjectParameter("CO", typeof(string));
    
            var sOParameter = sO != null ?
                new ObjectParameter("SO", sO) :
                new ObjectParameter("SO", typeof(string));
    
            var sonoParameter = sono != null ?
                new ObjectParameter("Sono", sono) :
                new ObjectParameter("Sono", typeof(string));
    
            var refMOParameter = refMO != null ?
                new ObjectParameter("RefMO", refMO) :
                new ObjectParameter("RefMO", typeof(string));
    
            var listOrderParameter = listOrder != null ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var feeRateParameter = feeRate.HasValue ?
                new ObjectParameter("FeeRate", feeRate) :
                new ObjectParameter("FeeRate", typeof(decimal));
    
            var feeRate2Parameter = feeRate2.HasValue ?
                new ObjectParameter("FeeRate2", feeRate2) :
                new ObjectParameter("FeeRate2", typeof(decimal));
    
            var swapParameter = swap != null ?
                new ObjectParameter("swap", swap) :
                new ObjectParameter("swap", typeof(string));
    
            var flagUseParameter = flagUse != null ?
                new ObjectParameter("FlagUse", flagUse) :
                new ObjectParameter("FlagUse", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var priceAfterDisParameter = priceAfterDis.HasValue ?
                new ObjectParameter("PriceAfterDis", priceAfterDis) :
                new ObjectParameter("PriceAfterDis", typeof(decimal));
    
            var usedIDParameter = usedID != null ?
                new ObjectParameter("UsedID", usedID) :
                new ObjectParameter("UsedID", typeof(string));
    
            var eN_REQParameter = eN_REQ != null ?
                new ObjectParameter("EN_REQ", eN_REQ) :
                new ObjectParameter("EN_REQ", typeof(string));
    
            var eN_HelperParameter = eN_Helper != null ?
                new ObjectParameter("EN_Helper", eN_Helper) :
                new ObjectParameter("EN_Helper", typeof(string));
    
            var courseCardIDParameter = courseCardID != null ?
                new ObjectParameter("CourseCardID", courseCardID) :
                new ObjectParameter("CourseCardID", typeof(string));
    
            var printCardParameter = printCard != null ?
                new ObjectParameter("PrintCard", printCard) :
                new ObjectParameter("PrintCard", typeof(string));
    
            var printSlipParameter = printSlip != null ?
                new ObjectParameter("PrintSlip", printSlip) :
                new ObjectParameter("PrintSlip", typeof(string));
    
            var isUpdatedParameter = isUpdated != null ?
                new ObjectParameter("IsUpdated", isUpdated) :
                new ObjectParameter("IsUpdated", typeof(string));
    
            var printLineOrderParameter = printLineOrder.HasValue ?
                new ObjectParameter("PrintLineOrder", printLineOrder) :
                new ObjectParameter("PrintLineOrder", typeof(decimal));
    
            var shotParameter = shot.HasValue ?
                new ObjectParameter("Shot", shot) :
                new ObjectParameter("Shot", typeof(decimal));
    
            var giftCodeParameter = giftCode != null ?
                new ObjectParameter("GiftCode", giftCode) :
                new ObjectParameter("GiftCode", typeof(string));
    
            var amountBalanceParameter = amountBalance.HasValue ?
                new ObjectParameter("AmountBalance", amountBalance) :
                new ObjectParameter("AmountBalance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_MedicalOrderUseTrans", queryTypeParameter, idParameter, vNParameter, cNParameter, mS_CodeParameter, amountOfUseParameter, amountTotalParameter, dateOfUseParameter, createByParameter, createDateParameter, updateByParameter, updateDateParameter, cN_USEDParameter, cOParameter, sOParameter, sonoParameter, refMOParameter, listOrderParameter, remarkParameter, feeRateParameter, feeRate2Parameter, swapParameter, flagUseParameter, branchIdParameter, priceAfterDisParameter, usedIDParameter, eN_REQParameter, eN_HelperParameter, courseCardIDParameter, printCardParameter, printSlipParameter, isUpdatedParameter, printLineOrderParameter, shotParameter, giftCodeParameter, amountBalanceParameter);
        }
    
        public virtual ObjectResult<string> sp_MedicalStuff(string vN, string mS_Code, string position_ID, string employeeId, string queryType, string sectionStuff, string mergStatus, string useTransId, string listOrder, string eN)
        {
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var position_IDParameter = position_ID != null ?
                new ObjectParameter("Position_ID", position_ID) :
                new ObjectParameter("Position_ID", typeof(string));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var sectionStuffParameter = sectionStuff != null ?
                new ObjectParameter("SectionStuff", sectionStuff) :
                new ObjectParameter("SectionStuff", typeof(string));
    
            var mergStatusParameter = mergStatus != null ?
                new ObjectParameter("MergStatus", mergStatus) :
                new ObjectParameter("MergStatus", typeof(string));
    
            var useTransIdParameter = useTransId != null ?
                new ObjectParameter("UseTransId", useTransId) :
                new ObjectParameter("UseTransId", typeof(string));
    
            var listOrderParameter = listOrder != null ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(string));
    
            var eNParameter = eN != null ?
                new ObjectParameter("EN", eN) :
                new ObjectParameter("EN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_MedicalStuff", vNParameter, mS_CodeParameter, position_IDParameter, employeeIdParameter, queryTypeParameter, sectionStuffParameter, mergStatusParameter, useTransIdParameter, listOrderParameter, eNParameter);
        }
    
        public virtual ObjectResult<sp_MedicalSupplies_Result> sp_MedicalSupplies(string queryType, Nullable<int> iD, string mS_Code, string mS_Code_Ref, string mS_Section, string mS_Name, string mS_Detail, string mS_Unit, string mS_CourseDuration, string mS_Type, Nullable<int> mS_CLPrice, Nullable<int> mS_CAPrice, Nullable<int> mS_CMPrice, Nullable<decimal> mS_Cost, Nullable<int> mS_Order, Nullable<int> mS_Instock, Nullable<int> mS_MinimumStock, Nullable<int> row_start, Nullable<int> row_end, Nullable<decimal> feeRate, Nullable<decimal> feeRate2, Nullable<decimal> maxDiscount, string vat, string branchID, string operationID, string purchaseID, string active, string bOM, Nullable<bool> type_Doctor, string sellToCN, Nullable<decimal> mS_Discount, Nullable<decimal> receive_Cost, Nullable<decimal> mS_CostAVG, Nullable<int> receiveQuantity, Nullable<int> quantity, Nullable<decimal> sell_Cost, Nullable<int> sellQuantity, string docNo, string activeType, string byID, Nullable<System.DateTime> saveDate, string eNSave, string remark, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> expireDate, string sono, string listOrder, Nullable<int> mS_Number_C, string locationID, string stock_Code, Nullable<decimal> usedAmount, Nullable<decimal> costPerUnit, string rEQNo, Nullable<System.DateTime> rEQDate, string eN_Req, string eN_ReqTo, string req_BranchId, string reqTo_BranchId, string fixSearch, Nullable<decimal> quantityReply, Nullable<decimal> quantityReceive, string remarkReply, string approved, string wHCode, string dept, Nullable<System.DateTime> replydate, string returnsFlag, string urgentFlag, string fortype, string mS_SubUnit, Nullable<decimal> anountPerMainUnit, string rEQUnitCode, string eatAmount, string eatPerday, string beforeMeals, string afterMeals, string morning, string lunch, string evening, string beforeBed, string eat, string coat, string coatArea, string everyhours, string vN)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var mS_Code_RefParameter = mS_Code_Ref != null ?
                new ObjectParameter("MS_Code_Ref", mS_Code_Ref) :
                new ObjectParameter("MS_Code_Ref", typeof(string));
    
            var mS_SectionParameter = mS_Section != null ?
                new ObjectParameter("MS_Section", mS_Section) :
                new ObjectParameter("MS_Section", typeof(string));
    
            var mS_NameParameter = mS_Name != null ?
                new ObjectParameter("MS_Name", mS_Name) :
                new ObjectParameter("MS_Name", typeof(string));
    
            var mS_DetailParameter = mS_Detail != null ?
                new ObjectParameter("MS_Detail", mS_Detail) :
                new ObjectParameter("MS_Detail", typeof(string));
    
            var mS_UnitParameter = mS_Unit != null ?
                new ObjectParameter("MS_Unit", mS_Unit) :
                new ObjectParameter("MS_Unit", typeof(string));
    
            var mS_CourseDurationParameter = mS_CourseDuration != null ?
                new ObjectParameter("MS_CourseDuration", mS_CourseDuration) :
                new ObjectParameter("MS_CourseDuration", typeof(string));
    
            var mS_TypeParameter = mS_Type != null ?
                new ObjectParameter("MS_Type", mS_Type) :
                new ObjectParameter("MS_Type", typeof(string));
    
            var mS_CLPriceParameter = mS_CLPrice.HasValue ?
                new ObjectParameter("MS_CLPrice", mS_CLPrice) :
                new ObjectParameter("MS_CLPrice", typeof(int));
    
            var mS_CAPriceParameter = mS_CAPrice.HasValue ?
                new ObjectParameter("MS_CAPrice", mS_CAPrice) :
                new ObjectParameter("MS_CAPrice", typeof(int));
    
            var mS_CMPriceParameter = mS_CMPrice.HasValue ?
                new ObjectParameter("MS_CMPrice", mS_CMPrice) :
                new ObjectParameter("MS_CMPrice", typeof(int));
    
            var mS_CostParameter = mS_Cost.HasValue ?
                new ObjectParameter("MS_Cost", mS_Cost) :
                new ObjectParameter("MS_Cost", typeof(decimal));
    
            var mS_OrderParameter = mS_Order.HasValue ?
                new ObjectParameter("MS_Order", mS_Order) :
                new ObjectParameter("MS_Order", typeof(int));
    
            var mS_InstockParameter = mS_Instock.HasValue ?
                new ObjectParameter("MS_Instock", mS_Instock) :
                new ObjectParameter("MS_Instock", typeof(int));
    
            var mS_MinimumStockParameter = mS_MinimumStock.HasValue ?
                new ObjectParameter("MS_MinimumStock", mS_MinimumStock) :
                new ObjectParameter("MS_MinimumStock", typeof(int));
    
            var row_startParameter = row_start.HasValue ?
                new ObjectParameter("row_start", row_start) :
                new ObjectParameter("row_start", typeof(int));
    
            var row_endParameter = row_end.HasValue ?
                new ObjectParameter("row_end", row_end) :
                new ObjectParameter("row_end", typeof(int));
    
            var feeRateParameter = feeRate.HasValue ?
                new ObjectParameter("FeeRate", feeRate) :
                new ObjectParameter("FeeRate", typeof(decimal));
    
            var feeRate2Parameter = feeRate2.HasValue ?
                new ObjectParameter("FeeRate2", feeRate2) :
                new ObjectParameter("FeeRate2", typeof(decimal));
    
            var maxDiscountParameter = maxDiscount.HasValue ?
                new ObjectParameter("MaxDiscount", maxDiscount) :
                new ObjectParameter("MaxDiscount", typeof(decimal));
    
            var vatParameter = vat != null ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(string));
    
            var branchIDParameter = branchID != null ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(string));
    
            var operationIDParameter = operationID != null ?
                new ObjectParameter("OperationID", operationID) :
                new ObjectParameter("OperationID", typeof(string));
    
            var purchaseIDParameter = purchaseID != null ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var bOMParameter = bOM != null ?
                new ObjectParameter("BOM", bOM) :
                new ObjectParameter("BOM", typeof(string));
    
            var type_DoctorParameter = type_Doctor.HasValue ?
                new ObjectParameter("Type_Doctor", type_Doctor) :
                new ObjectParameter("Type_Doctor", typeof(bool));
    
            var sellToCNParameter = sellToCN != null ?
                new ObjectParameter("SellToCN", sellToCN) :
                new ObjectParameter("SellToCN", typeof(string));
    
            var mS_DiscountParameter = mS_Discount.HasValue ?
                new ObjectParameter("MS_Discount", mS_Discount) :
                new ObjectParameter("MS_Discount", typeof(decimal));
    
            var receive_CostParameter = receive_Cost.HasValue ?
                new ObjectParameter("Receive_Cost", receive_Cost) :
                new ObjectParameter("Receive_Cost", typeof(decimal));
    
            var mS_CostAVGParameter = mS_CostAVG.HasValue ?
                new ObjectParameter("MS_CostAVG", mS_CostAVG) :
                new ObjectParameter("MS_CostAVG", typeof(decimal));
    
            var receiveQuantityParameter = receiveQuantity.HasValue ?
                new ObjectParameter("ReceiveQuantity", receiveQuantity) :
                new ObjectParameter("ReceiveQuantity", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var sell_CostParameter = sell_Cost.HasValue ?
                new ObjectParameter("Sell_Cost", sell_Cost) :
                new ObjectParameter("Sell_Cost", typeof(decimal));
    
            var sellQuantityParameter = sellQuantity.HasValue ?
                new ObjectParameter("SellQuantity", sellQuantity) :
                new ObjectParameter("SellQuantity", typeof(int));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var activeTypeParameter = activeType != null ?
                new ObjectParameter("ActiveType", activeType) :
                new ObjectParameter("ActiveType", typeof(string));
    
            var byIDParameter = byID != null ?
                new ObjectParameter("ByID", byID) :
                new ObjectParameter("ByID", typeof(string));
    
            var saveDateParameter = saveDate.HasValue ?
                new ObjectParameter("SaveDate", saveDate) :
                new ObjectParameter("SaveDate", typeof(System.DateTime));
    
            var eNSaveParameter = eNSave != null ?
                new ObjectParameter("ENSave", eNSave) :
                new ObjectParameter("ENSave", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var expireDateParameter = expireDate.HasValue ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(System.DateTime));
    
            var sonoParameter = sono != null ?
                new ObjectParameter("Sono", sono) :
                new ObjectParameter("Sono", typeof(string));
    
            var listOrderParameter = listOrder != null ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(string));
    
            var mS_Number_CParameter = mS_Number_C.HasValue ?
                new ObjectParameter("MS_Number_C", mS_Number_C) :
                new ObjectParameter("MS_Number_C", typeof(int));
    
            var locationIDParameter = locationID != null ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(string));
    
            var stock_CodeParameter = stock_Code != null ?
                new ObjectParameter("Stock_Code", stock_Code) :
                new ObjectParameter("Stock_Code", typeof(string));
    
            var usedAmountParameter = usedAmount.HasValue ?
                new ObjectParameter("UsedAmount", usedAmount) :
                new ObjectParameter("UsedAmount", typeof(decimal));
    
            var costPerUnitParameter = costPerUnit.HasValue ?
                new ObjectParameter("CostPerUnit", costPerUnit) :
                new ObjectParameter("CostPerUnit", typeof(decimal));
    
            var rEQNoParameter = rEQNo != null ?
                new ObjectParameter("REQNo", rEQNo) :
                new ObjectParameter("REQNo", typeof(string));
    
            var rEQDateParameter = rEQDate.HasValue ?
                new ObjectParameter("REQDate", rEQDate) :
                new ObjectParameter("REQDate", typeof(System.DateTime));
    
            var eN_ReqParameter = eN_Req != null ?
                new ObjectParameter("EN_Req", eN_Req) :
                new ObjectParameter("EN_Req", typeof(string));
    
            var eN_ReqToParameter = eN_ReqTo != null ?
                new ObjectParameter("EN_ReqTo", eN_ReqTo) :
                new ObjectParameter("EN_ReqTo", typeof(string));
    
            var req_BranchIdParameter = req_BranchId != null ?
                new ObjectParameter("Req_BranchId", req_BranchId) :
                new ObjectParameter("Req_BranchId", typeof(string));
    
            var reqTo_BranchIdParameter = reqTo_BranchId != null ?
                new ObjectParameter("ReqTo_BranchId", reqTo_BranchId) :
                new ObjectParameter("ReqTo_BranchId", typeof(string));
    
            var fixSearchParameter = fixSearch != null ?
                new ObjectParameter("FixSearch", fixSearch) :
                new ObjectParameter("FixSearch", typeof(string));
    
            var quantityReplyParameter = quantityReply.HasValue ?
                new ObjectParameter("QuantityReply", quantityReply) :
                new ObjectParameter("QuantityReply", typeof(decimal));
    
            var quantityReceiveParameter = quantityReceive.HasValue ?
                new ObjectParameter("QuantityReceive", quantityReceive) :
                new ObjectParameter("QuantityReceive", typeof(decimal));
    
            var remarkReplyParameter = remarkReply != null ?
                new ObjectParameter("RemarkReply", remarkReply) :
                new ObjectParameter("RemarkReply", typeof(string));
    
            var approvedParameter = approved != null ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(string));
    
            var wHCodeParameter = wHCode != null ?
                new ObjectParameter("WHCode", wHCode) :
                new ObjectParameter("WHCode", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var replydateParameter = replydate.HasValue ?
                new ObjectParameter("Replydate", replydate) :
                new ObjectParameter("Replydate", typeof(System.DateTime));
    
            var returnsFlagParameter = returnsFlag != null ?
                new ObjectParameter("ReturnsFlag", returnsFlag) :
                new ObjectParameter("ReturnsFlag", typeof(string));
    
            var urgentFlagParameter = urgentFlag != null ?
                new ObjectParameter("UrgentFlag", urgentFlag) :
                new ObjectParameter("UrgentFlag", typeof(string));
    
            var fortypeParameter = fortype != null ?
                new ObjectParameter("Fortype", fortype) :
                new ObjectParameter("Fortype", typeof(string));
    
            var mS_SubUnitParameter = mS_SubUnit != null ?
                new ObjectParameter("MS_SubUnit", mS_SubUnit) :
                new ObjectParameter("MS_SubUnit", typeof(string));
    
            var anountPerMainUnitParameter = anountPerMainUnit.HasValue ?
                new ObjectParameter("AnountPerMainUnit", anountPerMainUnit) :
                new ObjectParameter("AnountPerMainUnit", typeof(decimal));
    
            var rEQUnitCodeParameter = rEQUnitCode != null ?
                new ObjectParameter("REQUnitCode", rEQUnitCode) :
                new ObjectParameter("REQUnitCode", typeof(string));
    
            var eatAmountParameter = eatAmount != null ?
                new ObjectParameter("EatAmount", eatAmount) :
                new ObjectParameter("EatAmount", typeof(string));
    
            var eatPerdayParameter = eatPerday != null ?
                new ObjectParameter("EatPerday", eatPerday) :
                new ObjectParameter("EatPerday", typeof(string));
    
            var beforeMealsParameter = beforeMeals != null ?
                new ObjectParameter("BeforeMeals", beforeMeals) :
                new ObjectParameter("BeforeMeals", typeof(string));
    
            var afterMealsParameter = afterMeals != null ?
                new ObjectParameter("AfterMeals", afterMeals) :
                new ObjectParameter("AfterMeals", typeof(string));
    
            var morningParameter = morning != null ?
                new ObjectParameter("Morning", morning) :
                new ObjectParameter("Morning", typeof(string));
    
            var lunchParameter = lunch != null ?
                new ObjectParameter("Lunch", lunch) :
                new ObjectParameter("Lunch", typeof(string));
    
            var eveningParameter = evening != null ?
                new ObjectParameter("Evening", evening) :
                new ObjectParameter("Evening", typeof(string));
    
            var beforeBedParameter = beforeBed != null ?
                new ObjectParameter("BeforeBed", beforeBed) :
                new ObjectParameter("BeforeBed", typeof(string));
    
            var eatParameter = eat != null ?
                new ObjectParameter("eat", eat) :
                new ObjectParameter("eat", typeof(string));
    
            var coatParameter = coat != null ?
                new ObjectParameter("coat", coat) :
                new ObjectParameter("coat", typeof(string));
    
            var coatAreaParameter = coatArea != null ?
                new ObjectParameter("coatArea", coatArea) :
                new ObjectParameter("coatArea", typeof(string));
    
            var everyhoursParameter = everyhours != null ?
                new ObjectParameter("Everyhours", everyhours) :
                new ObjectParameter("Everyhours", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MedicalSupplies_Result>("sp_MedicalSupplies", queryTypeParameter, iDParameter, mS_CodeParameter, mS_Code_RefParameter, mS_SectionParameter, mS_NameParameter, mS_DetailParameter, mS_UnitParameter, mS_CourseDurationParameter, mS_TypeParameter, mS_CLPriceParameter, mS_CAPriceParameter, mS_CMPriceParameter, mS_CostParameter, mS_OrderParameter, mS_InstockParameter, mS_MinimumStockParameter, row_startParameter, row_endParameter, feeRateParameter, feeRate2Parameter, maxDiscountParameter, vatParameter, branchIDParameter, operationIDParameter, purchaseIDParameter, activeParameter, bOMParameter, type_DoctorParameter, sellToCNParameter, mS_DiscountParameter, receive_CostParameter, mS_CostAVGParameter, receiveQuantityParameter, quantityParameter, sell_CostParameter, sellQuantityParameter, docNoParameter, activeTypeParameter, byIDParameter, saveDateParameter, eNSaveParameter, remarkParameter, startDateParameter, endDateParameter, expireDateParameter, sonoParameter, listOrderParameter, mS_Number_CParameter, locationIDParameter, stock_CodeParameter, usedAmountParameter, costPerUnitParameter, rEQNoParameter, rEQDateParameter, eN_ReqParameter, eN_ReqToParameter, req_BranchIdParameter, reqTo_BranchIdParameter, fixSearchParameter, quantityReplyParameter, quantityReceiveParameter, remarkReplyParameter, approvedParameter, wHCodeParameter, deptParameter, replydateParameter, returnsFlagParameter, urgentFlagParameter, fortypeParameter, mS_SubUnitParameter, anountPerMainUnitParameter, rEQUnitCodeParameter, eatAmountParameter, eatPerdayParameter, beforeMealsParameter, afterMealsParameter, morningParameter, lunchParameter, eveningParameter, beforeBedParameter, eatParameter, coatParameter, coatAreaParameter, everyhoursParameter, vNParameter);
        }
    
        public virtual ObjectResult<sp_MedicalSuppliesSilicone_Result> sp_MedicalSuppliesSilicone(string queryType, string mS_Code)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MedicalSuppliesSilicone_Result>("sp_MedicalSuppliesSilicone", queryTypeParameter, mS_CodeParameter);
        }
    
        public virtual ObjectResult<sp_MemberGroup_Result> sp_MemberGroup(string queryType, string vN, string mS_Code, string cN_Main, string cN, string cN_Sub)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var cN_MainParameter = cN_Main != null ?
                new ObjectParameter("CN_Main", cN_Main) :
                new ObjectParameter("CN_Main", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var cN_SubParameter = cN_Sub != null ?
                new ObjectParameter("CN_Sub", cN_Sub) :
                new ObjectParameter("CN_Sub", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MemberGroup_Result>("sp_MemberGroup", queryTypeParameter, vNParameter, mS_CodeParameter, cN_MainParameter, cNParameter, cN_SubParameter);
        }
    
        public virtual ObjectResult<sp_MemberGroup_BK_Result> sp_MemberGroup_BK(string queryType, string vN, string mS_Code, string cN_Main, string cN_Sub)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var cN_MainParameter = cN_Main != null ?
                new ObjectParameter("CN_Main", cN_Main) :
                new ObjectParameter("CN_Main", typeof(string));
    
            var cN_SubParameter = cN_Sub != null ?
                new ObjectParameter("CN_Sub", cN_Sub) :
                new ObjectParameter("CN_Sub", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MemberGroup_BK_Result>("sp_MemberGroup_BK", queryTypeParameter, vNParameter, mS_CodeParameter, cN_MainParameter, cN_SubParameter);
        }
    
        public virtual ObjectResult<sp_Menu_Result> sp_Menu(string queryType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Menu_Result>("sp_Menu", queryTypeParameter);
        }
    
        public virtual ObjectResult<sp_menupermission_Result> sp_menupermission(string queryType, string menuId, Nullable<int> groupId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var menuIdParameter = menuId != null ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(string));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_menupermission_Result>("sp_menupermission", queryTypeParameter, menuIdParameter, groupIdParameter);
        }
    
        public virtual ObjectResult<sp_personnel_Result> sp_personnel(string queryType, string addressId, string building, string createBy, Nullable<System.DateTime> createDate, Nullable<System.DateTime> dateBirth, Nullable<System.DateTime> dateEndW, Nullable<System.DateTime> dateRegister, Nullable<System.DateTime> dateStartW, string district, string eFirstname, string eLastname, string eMiddlename, string eN, string eNickname, string e_mail, string gender, Nullable<int> height, string idCard, string mobile1, string mobile2, string nationality, string passportId, string passwords, string personnelType, string postCode, string prefixCode, string province, string race, string road, string soi, string sub_district, string tName, string tNickname, string tSurname, string telephone1, string telephone2, string updateBy, string userGroup, Nullable<int> weights, string username, Nullable<int> row_start, Nullable<int> row_end, string imageFilename, string branchID, string active, string branchAuth)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var addressIdParameter = addressId != null ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var dateBirthParameter = dateBirth.HasValue ?
                new ObjectParameter("DateBirth", dateBirth) :
                new ObjectParameter("DateBirth", typeof(System.DateTime));
    
            var dateEndWParameter = dateEndW.HasValue ?
                new ObjectParameter("DateEndW", dateEndW) :
                new ObjectParameter("DateEndW", typeof(System.DateTime));
    
            var dateRegisterParameter = dateRegister.HasValue ?
                new ObjectParameter("DateRegister", dateRegister) :
                new ObjectParameter("DateRegister", typeof(System.DateTime));
    
            var dateStartWParameter = dateStartW.HasValue ?
                new ObjectParameter("DateStartW", dateStartW) :
                new ObjectParameter("DateStartW", typeof(System.DateTime));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var eFirstnameParameter = eFirstname != null ?
                new ObjectParameter("EFirstname", eFirstname) :
                new ObjectParameter("EFirstname", typeof(string));
    
            var eLastnameParameter = eLastname != null ?
                new ObjectParameter("ELastname", eLastname) :
                new ObjectParameter("ELastname", typeof(string));
    
            var eMiddlenameParameter = eMiddlename != null ?
                new ObjectParameter("EMiddlename", eMiddlename) :
                new ObjectParameter("EMiddlename", typeof(string));
    
            var eNParameter = eN != null ?
                new ObjectParameter("EN", eN) :
                new ObjectParameter("EN", typeof(string));
    
            var eNicknameParameter = eNickname != null ?
                new ObjectParameter("ENickname", eNickname) :
                new ObjectParameter("ENickname", typeof(string));
    
            var e_mailParameter = e_mail != null ?
                new ObjectParameter("E_mail", e_mail) :
                new ObjectParameter("E_mail", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var idCardParameter = idCard != null ?
                new ObjectParameter("IdCard", idCard) :
                new ObjectParameter("IdCard", typeof(string));
    
            var mobile1Parameter = mobile1 != null ?
                new ObjectParameter("Mobile1", mobile1) :
                new ObjectParameter("Mobile1", typeof(string));
    
            var mobile2Parameter = mobile2 != null ?
                new ObjectParameter("Mobile2", mobile2) :
                new ObjectParameter("Mobile2", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var passportIdParameter = passportId != null ?
                new ObjectParameter("PassportId", passportId) :
                new ObjectParameter("PassportId", typeof(string));
    
            var passwordsParameter = passwords != null ?
                new ObjectParameter("Passwords", passwords) :
                new ObjectParameter("Passwords", typeof(string));
    
            var personnelTypeParameter = personnelType != null ?
                new ObjectParameter("PersonnelType", personnelType) :
                new ObjectParameter("PersonnelType", typeof(string));
    
            var postCodeParameter = postCode != null ?
                new ObjectParameter("PostCode", postCode) :
                new ObjectParameter("PostCode", typeof(string));
    
            var prefixCodeParameter = prefixCode != null ?
                new ObjectParameter("PrefixCode", prefixCode) :
                new ObjectParameter("PrefixCode", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var raceParameter = race != null ?
                new ObjectParameter("Race", race) :
                new ObjectParameter("Race", typeof(string));
    
            var roadParameter = road != null ?
                new ObjectParameter("Road", road) :
                new ObjectParameter("Road", typeof(string));
    
            var soiParameter = soi != null ?
                new ObjectParameter("Soi", soi) :
                new ObjectParameter("Soi", typeof(string));
    
            var sub_districtParameter = sub_district != null ?
                new ObjectParameter("Sub_district", sub_district) :
                new ObjectParameter("Sub_district", typeof(string));
    
            var tNameParameter = tName != null ?
                new ObjectParameter("TName", tName) :
                new ObjectParameter("TName", typeof(string));
    
            var tNicknameParameter = tNickname != null ?
                new ObjectParameter("TNickname", tNickname) :
                new ObjectParameter("TNickname", typeof(string));
    
            var tSurnameParameter = tSurname != null ?
                new ObjectParameter("TSurname", tSurname) :
                new ObjectParameter("TSurname", typeof(string));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var userGroupParameter = userGroup != null ?
                new ObjectParameter("UserGroup", userGroup) :
                new ObjectParameter("UserGroup", typeof(string));
    
            var weightsParameter = weights.HasValue ?
                new ObjectParameter("Weights", weights) :
                new ObjectParameter("Weights", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var row_startParameter = row_start.HasValue ?
                new ObjectParameter("row_start", row_start) :
                new ObjectParameter("row_start", typeof(int));
    
            var row_endParameter = row_end.HasValue ?
                new ObjectParameter("row_end", row_end) :
                new ObjectParameter("row_end", typeof(int));
    
            var imageFilenameParameter = imageFilename != null ?
                new ObjectParameter("ImageFilename", imageFilename) :
                new ObjectParameter("ImageFilename", typeof(string));
    
            var branchIDParameter = branchID != null ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var branchAuthParameter = branchAuth != null ?
                new ObjectParameter("BranchAuth", branchAuth) :
                new ObjectParameter("BranchAuth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_personnel_Result>("sp_personnel", queryTypeParameter, addressIdParameter, buildingParameter, createByParameter, createDateParameter, dateBirthParameter, dateEndWParameter, dateRegisterParameter, dateStartWParameter, districtParameter, eFirstnameParameter, eLastnameParameter, eMiddlenameParameter, eNParameter, eNicknameParameter, e_mailParameter, genderParameter, heightParameter, idCardParameter, mobile1Parameter, mobile2Parameter, nationalityParameter, passportIdParameter, passwordsParameter, personnelTypeParameter, postCodeParameter, prefixCodeParameter, provinceParameter, raceParameter, roadParameter, soiParameter, sub_districtParameter, tNameParameter, tNicknameParameter, tSurnameParameter, telephone1Parameter, telephone2Parameter, updateByParameter, userGroupParameter, weightsParameter, usernameParameter, row_startParameter, row_endParameter, imageFilenameParameter, branchIDParameter, activeParameter, branchAuthParameter);
        }
    
        public virtual ObjectResult<sp_Promotion_Result> sp_Promotion(string queryType, string pRO_Code, string pRO_Name, string mS_Code, Nullable<int> amount, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> createDate, Nullable<System.DateTime> updateDate, string createBy, string updateBy, Nullable<decimal> proPrice, Nullable<decimal> proPriceCredit, string pRO_Active, string remark, Nullable<int> row_start, Nullable<int> row_end, string pRO_Type, string productGroup, string pRO_Dept, Nullable<decimal> fix_Amount, string pRO_CalType, string moneyWallet, string fixByItem)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var pRO_CodeParameter = pRO_Code != null ?
                new ObjectParameter("PRO_Code", pRO_Code) :
                new ObjectParameter("PRO_Code", typeof(string));
    
            var pRO_NameParameter = pRO_Name != null ?
                new ObjectParameter("PRO_Name", pRO_Name) :
                new ObjectParameter("PRO_Name", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var proPriceParameter = proPrice.HasValue ?
                new ObjectParameter("ProPrice", proPrice) :
                new ObjectParameter("ProPrice", typeof(decimal));
    
            var proPriceCreditParameter = proPriceCredit.HasValue ?
                new ObjectParameter("ProPriceCredit", proPriceCredit) :
                new ObjectParameter("ProPriceCredit", typeof(decimal));
    
            var pRO_ActiveParameter = pRO_Active != null ?
                new ObjectParameter("PRO_Active", pRO_Active) :
                new ObjectParameter("PRO_Active", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var row_startParameter = row_start.HasValue ?
                new ObjectParameter("row_start", row_start) :
                new ObjectParameter("row_start", typeof(int));
    
            var row_endParameter = row_end.HasValue ?
                new ObjectParameter("row_end", row_end) :
                new ObjectParameter("row_end", typeof(int));
    
            var pRO_TypeParameter = pRO_Type != null ?
                new ObjectParameter("PRO_Type", pRO_Type) :
                new ObjectParameter("PRO_Type", typeof(string));
    
            var productGroupParameter = productGroup != null ?
                new ObjectParameter("ProductGroup", productGroup) :
                new ObjectParameter("ProductGroup", typeof(string));
    
            var pRO_DeptParameter = pRO_Dept != null ?
                new ObjectParameter("PRO_Dept", pRO_Dept) :
                new ObjectParameter("PRO_Dept", typeof(string));
    
            var fix_AmountParameter = fix_Amount.HasValue ?
                new ObjectParameter("Fix_Amount", fix_Amount) :
                new ObjectParameter("Fix_Amount", typeof(decimal));
    
            var pRO_CalTypeParameter = pRO_CalType != null ?
                new ObjectParameter("PRO_CalType", pRO_CalType) :
                new ObjectParameter("PRO_CalType", typeof(string));
    
            var moneyWalletParameter = moneyWallet != null ?
                new ObjectParameter("MoneyWallet", moneyWallet) :
                new ObjectParameter("MoneyWallet", typeof(string));
    
            var fixByItemParameter = fixByItem != null ?
                new ObjectParameter("FixByItem", fixByItem) :
                new ObjectParameter("FixByItem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Promotion_Result>("sp_Promotion", queryTypeParameter, pRO_CodeParameter, pRO_NameParameter, mS_CodeParameter, amountParameter, dateStartParameter, dateEndParameter, createDateParameter, updateDateParameter, createByParameter, updateByParameter, proPriceParameter, proPriceCreditParameter, pRO_ActiveParameter, remarkParameter, row_startParameter, row_endParameter, pRO_TypeParameter, productGroupParameter, pRO_DeptParameter, fix_AmountParameter, pRO_CalTypeParameter, moneyWalletParameter, fixByItemParameter);
        }
    
        public virtual ObjectResult<string> sp_PromotionTrans(string queryType, string vN, string pro_Code, Nullable<decimal> amount, Nullable<decimal> numOfUse, string complimentary, string marketingBudget, string subject, string gift, string giftNumber, string mergStatus, Nullable<decimal> feeRate, Nullable<decimal> feeRate2, string beforeAfter, string extras_sale, string vIP, string expireDate, string note, string sONo, Nullable<decimal> specialPrice, Nullable<decimal> pro_Price, Nullable<decimal> priceAfterDis, Nullable<decimal> discountBathByItem, Nullable<decimal> payByItem, string pRO_MDiscount, string listOrder, string listMS_Code)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var pro_CodeParameter = pro_Code != null ?
                new ObjectParameter("Pro_Code", pro_Code) :
                new ObjectParameter("Pro_Code", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var numOfUseParameter = numOfUse.HasValue ?
                new ObjectParameter("NumOfUse", numOfUse) :
                new ObjectParameter("NumOfUse", typeof(decimal));
    
            var complimentaryParameter = complimentary != null ?
                new ObjectParameter("Complimentary", complimentary) :
                new ObjectParameter("Complimentary", typeof(string));
    
            var marketingBudgetParameter = marketingBudget != null ?
                new ObjectParameter("MarketingBudget", marketingBudget) :
                new ObjectParameter("MarketingBudget", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var giftParameter = gift != null ?
                new ObjectParameter("Gift", gift) :
                new ObjectParameter("Gift", typeof(string));
    
            var giftNumberParameter = giftNumber != null ?
                new ObjectParameter("GiftNumber", giftNumber) :
                new ObjectParameter("GiftNumber", typeof(string));
    
            var mergStatusParameter = mergStatus != null ?
                new ObjectParameter("MergStatus", mergStatus) :
                new ObjectParameter("MergStatus", typeof(string));
    
            var feeRateParameter = feeRate.HasValue ?
                new ObjectParameter("FeeRate", feeRate) :
                new ObjectParameter("FeeRate", typeof(decimal));
    
            var feeRate2Parameter = feeRate2.HasValue ?
                new ObjectParameter("FeeRate2", feeRate2) :
                new ObjectParameter("FeeRate2", typeof(decimal));
    
            var beforeAfterParameter = beforeAfter != null ?
                new ObjectParameter("BeforeAfter", beforeAfter) :
                new ObjectParameter("BeforeAfter", typeof(string));
    
            var extras_saleParameter = extras_sale != null ?
                new ObjectParameter("Extras_sale", extras_sale) :
                new ObjectParameter("Extras_sale", typeof(string));
    
            var vIPParameter = vIP != null ?
                new ObjectParameter("VIP", vIP) :
                new ObjectParameter("VIP", typeof(string));
    
            var expireDateParameter = expireDate != null ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var sONoParameter = sONo != null ?
                new ObjectParameter("SONo", sONo) :
                new ObjectParameter("SONo", typeof(string));
    
            var specialPriceParameter = specialPrice.HasValue ?
                new ObjectParameter("SpecialPrice", specialPrice) :
                new ObjectParameter("SpecialPrice", typeof(decimal));
    
            var pro_PriceParameter = pro_Price.HasValue ?
                new ObjectParameter("Pro_Price", pro_Price) :
                new ObjectParameter("Pro_Price", typeof(decimal));
    
            var priceAfterDisParameter = priceAfterDis.HasValue ?
                new ObjectParameter("PriceAfterDis", priceAfterDis) :
                new ObjectParameter("PriceAfterDis", typeof(decimal));
    
            var discountBathByItemParameter = discountBathByItem.HasValue ?
                new ObjectParameter("DiscountBathByItem", discountBathByItem) :
                new ObjectParameter("DiscountBathByItem", typeof(decimal));
    
            var payByItemParameter = payByItem.HasValue ?
                new ObjectParameter("PayByItem", payByItem) :
                new ObjectParameter("PayByItem", typeof(decimal));
    
            var pRO_MDiscountParameter = pRO_MDiscount != null ?
                new ObjectParameter("PRO_MDiscount", pRO_MDiscount) :
                new ObjectParameter("PRO_MDiscount", typeof(string));
    
            var listOrderParameter = listOrder != null ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(string));
    
            var listMS_CodeParameter = listMS_Code != null ?
                new ObjectParameter("ListMS_Code", listMS_Code) :
                new ObjectParameter("ListMS_Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_PromotionTrans", queryTypeParameter, vNParameter, pro_CodeParameter, amountParameter, numOfUseParameter, complimentaryParameter, marketingBudgetParameter, subjectParameter, giftParameter, giftNumberParameter, mergStatusParameter, feeRateParameter, feeRate2Parameter, beforeAfterParameter, extras_saleParameter, vIPParameter, expireDateParameter, noteParameter, sONoParameter, specialPriceParameter, pro_PriceParameter, priceAfterDisParameter, discountBathByItemParameter, payByItemParameter, pRO_MDiscountParameter, listOrderParameter, listMS_CodeParameter);
        }
    
        public virtual ObjectResult<sp_province_Result> sp_province(string queryType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_province_Result>("sp_province", queryTypeParameter);
        }
    
        public virtual ObjectResult<sp_Refund_Result> sp_Refund(string queryType, string sOno, string vN, string mS_Code, string listOrder, string rFD, Nullable<decimal> refund, Nullable<System.DateTime> refundDate, string refundType, string refundRemark, string payType, string payCustName, string payBankID, string payBankNumber, string refundSince, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> lastUsed, string branchId, string cN, string dr, string refVN, string approved)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var sOnoParameter = sOno != null ?
                new ObjectParameter("SOno", sOno) :
                new ObjectParameter("SOno", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var listOrderParameter = listOrder != null ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(string));
    
            var rFDParameter = rFD != null ?
                new ObjectParameter("RFD", rFD) :
                new ObjectParameter("RFD", typeof(string));
    
            var refundParameter = refund.HasValue ?
                new ObjectParameter("Refund", refund) :
                new ObjectParameter("Refund", typeof(decimal));
    
            var refundDateParameter = refundDate.HasValue ?
                new ObjectParameter("RefundDate", refundDate) :
                new ObjectParameter("RefundDate", typeof(System.DateTime));
    
            var refundTypeParameter = refundType != null ?
                new ObjectParameter("RefundType", refundType) :
                new ObjectParameter("RefundType", typeof(string));
    
            var refundRemarkParameter = refundRemark != null ?
                new ObjectParameter("RefundRemark", refundRemark) :
                new ObjectParameter("RefundRemark", typeof(string));
    
            var payTypeParameter = payType != null ?
                new ObjectParameter("PayType", payType) :
                new ObjectParameter("PayType", typeof(string));
    
            var payCustNameParameter = payCustName != null ?
                new ObjectParameter("PayCustName", payCustName) :
                new ObjectParameter("PayCustName", typeof(string));
    
            var payBankIDParameter = payBankID != null ?
                new ObjectParameter("PayBankID", payBankID) :
                new ObjectParameter("PayBankID", typeof(string));
    
            var payBankNumberParameter = payBankNumber != null ?
                new ObjectParameter("PayBankNumber", payBankNumber) :
                new ObjectParameter("PayBankNumber", typeof(string));
    
            var refundSinceParameter = refundSince != null ?
                new ObjectParameter("RefundSince", refundSince) :
                new ObjectParameter("RefundSince", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var lastUsedParameter = lastUsed.HasValue ?
                new ObjectParameter("LastUsed", lastUsed) :
                new ObjectParameter("LastUsed", typeof(System.DateTime));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var drParameter = dr != null ?
                new ObjectParameter("Dr", dr) :
                new ObjectParameter("Dr", typeof(string));
    
            var refVNParameter = refVN != null ?
                new ObjectParameter("RefVN", refVN) :
                new ObjectParameter("RefVN", typeof(string));
    
            var approvedParameter = approved != null ?
                new ObjectParameter("Approved", approved) :
                new ObjectParameter("Approved", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Refund_Result>("sp_Refund", queryTypeParameter, sOnoParameter, vNParameter, mS_CodeParameter, listOrderParameter, rFDParameter, refundParameter, refundDateParameter, refundTypeParameter, refundRemarkParameter, payTypeParameter, payCustNameParameter, payBankIDParameter, payBankNumberParameter, refundSinceParameter, startDateParameter, endDateParameter, lastUsedParameter, branchIdParameter, cNParameter, drParameter, refVNParameter, approvedParameter);
        }
    
        public virtual int sp_Report(string vN, string vNClose, string cN, string cO, string eN_Save, string remark, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string queryType, Nullable<decimal> salePrice, Nullable<decimal> priceTotalRef, Nullable<int> row_start, Nullable<int> row_end, string tName, string tSurname, string tab, string mS_Name, string ms_Code, string tabwhere, string medStatus_Code, string medStatus_CodeNew, string medStatus_CodePending, string medStatus_CodeClosed, string medStatus_CodeUnpaid, string medStatus_CodeDeposit, string medStatus_CodePaid, string agenMemID, string sONo, string eN_COMS1, string eN_COMS2, string note, string mOType, string pRO_Code, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string birthMonth, Nullable<int> peroid, string branchId, string todayOnly)
        {
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var vNCloseParameter = vNClose != null ?
                new ObjectParameter("VNClose", vNClose) :
                new ObjectParameter("VNClose", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var cOParameter = cO != null ?
                new ObjectParameter("CO", cO) :
                new ObjectParameter("CO", typeof(string));
    
            var eN_SaveParameter = eN_Save != null ?
                new ObjectParameter("EN_Save", eN_Save) :
                new ObjectParameter("EN_Save", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var priceTotalRefParameter = priceTotalRef.HasValue ?
                new ObjectParameter("PriceTotalRef", priceTotalRef) :
                new ObjectParameter("PriceTotalRef", typeof(decimal));
    
            var row_startParameter = row_start.HasValue ?
                new ObjectParameter("row_start", row_start) :
                new ObjectParameter("row_start", typeof(int));
    
            var row_endParameter = row_end.HasValue ?
                new ObjectParameter("row_end", row_end) :
                new ObjectParameter("row_end", typeof(int));
    
            var tNameParameter = tName != null ?
                new ObjectParameter("TName", tName) :
                new ObjectParameter("TName", typeof(string));
    
            var tSurnameParameter = tSurname != null ?
                new ObjectParameter("TSurname", tSurname) :
                new ObjectParameter("TSurname", typeof(string));
    
            var tabParameter = tab != null ?
                new ObjectParameter("Tab", tab) :
                new ObjectParameter("Tab", typeof(string));
    
            var mS_NameParameter = mS_Name != null ?
                new ObjectParameter("MS_Name", mS_Name) :
                new ObjectParameter("MS_Name", typeof(string));
    
            var ms_CodeParameter = ms_Code != null ?
                new ObjectParameter("Ms_Code", ms_Code) :
                new ObjectParameter("Ms_Code", typeof(string));
    
            var tabwhereParameter = tabwhere != null ?
                new ObjectParameter("Tabwhere", tabwhere) :
                new ObjectParameter("Tabwhere", typeof(string));
    
            var medStatus_CodeParameter = medStatus_Code != null ?
                new ObjectParameter("MedStatus_Code", medStatus_Code) :
                new ObjectParameter("MedStatus_Code", typeof(string));
    
            var medStatus_CodeNewParameter = medStatus_CodeNew != null ?
                new ObjectParameter("MedStatus_CodeNew", medStatus_CodeNew) :
                new ObjectParameter("MedStatus_CodeNew", typeof(string));
    
            var medStatus_CodePendingParameter = medStatus_CodePending != null ?
                new ObjectParameter("MedStatus_CodePending", medStatus_CodePending) :
                new ObjectParameter("MedStatus_CodePending", typeof(string));
    
            var medStatus_CodeClosedParameter = medStatus_CodeClosed != null ?
                new ObjectParameter("MedStatus_CodeClosed", medStatus_CodeClosed) :
                new ObjectParameter("MedStatus_CodeClosed", typeof(string));
    
            var medStatus_CodeUnpaidParameter = medStatus_CodeUnpaid != null ?
                new ObjectParameter("MedStatus_CodeUnpaid", medStatus_CodeUnpaid) :
                new ObjectParameter("MedStatus_CodeUnpaid", typeof(string));
    
            var medStatus_CodeDepositParameter = medStatus_CodeDeposit != null ?
                new ObjectParameter("MedStatus_CodeDeposit", medStatus_CodeDeposit) :
                new ObjectParameter("MedStatus_CodeDeposit", typeof(string));
    
            var medStatus_CodePaidParameter = medStatus_CodePaid != null ?
                new ObjectParameter("MedStatus_CodePaid", medStatus_CodePaid) :
                new ObjectParameter("MedStatus_CodePaid", typeof(string));
    
            var agenMemIDParameter = agenMemID != null ?
                new ObjectParameter("AgenMemID", agenMemID) :
                new ObjectParameter("AgenMemID", typeof(string));
    
            var sONoParameter = sONo != null ?
                new ObjectParameter("SONo", sONo) :
                new ObjectParameter("SONo", typeof(string));
    
            var eN_COMS1Parameter = eN_COMS1 != null ?
                new ObjectParameter("EN_COMS1", eN_COMS1) :
                new ObjectParameter("EN_COMS1", typeof(string));
    
            var eN_COMS2Parameter = eN_COMS2 != null ?
                new ObjectParameter("EN_COMS2", eN_COMS2) :
                new ObjectParameter("EN_COMS2", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var mOTypeParameter = mOType != null ?
                new ObjectParameter("MOType", mOType) :
                new ObjectParameter("MOType", typeof(string));
    
            var pRO_CodeParameter = pRO_Code != null ?
                new ObjectParameter("PRO_Code", pRO_Code) :
                new ObjectParameter("PRO_Code", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var birthMonthParameter = birthMonth != null ?
                new ObjectParameter("BirthMonth", birthMonth) :
                new ObjectParameter("BirthMonth", typeof(string));
    
            var peroidParameter = peroid.HasValue ?
                new ObjectParameter("Peroid", peroid) :
                new ObjectParameter("Peroid", typeof(int));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var todayOnlyParameter = todayOnly != null ?
                new ObjectParameter("TodayOnly", todayOnly) :
                new ObjectParameter("TodayOnly", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Report", vNParameter, vNCloseParameter, cNParameter, cOParameter, eN_SaveParameter, remarkParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, queryTypeParameter, salePriceParameter, priceTotalRefParameter, row_startParameter, row_endParameter, tNameParameter, tSurnameParameter, tabParameter, mS_NameParameter, ms_CodeParameter, tabwhereParameter, medStatus_CodeParameter, medStatus_CodeNewParameter, medStatus_CodePendingParameter, medStatus_CodeClosedParameter, medStatus_CodeUnpaidParameter, medStatus_CodeDepositParameter, medStatus_CodePaidParameter, agenMemIDParameter, sONoParameter, eN_COMS1Parameter, eN_COMS2Parameter, noteParameter, mOTypeParameter, pRO_CodeParameter, startDateParameter, endDateParameter, birthMonthParameter, peroidParameter, branchIdParameter, todayOnlyParameter);
        }
    
        public virtual int sp_Report_AE(string vN, string vNClose, string cN, string cO, string eN_Save, string remark, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string queryType, Nullable<decimal> salePrice, Nullable<decimal> priceTotalRef, Nullable<int> row_start, Nullable<int> row_end, string tName, string tSurname, string tab, string mS_Name, string ms_Code, string tabwhere, string medStatus_Code, string medStatus_CodeNew, string medStatus_CodePending, string medStatus_CodeClosed, string medStatus_CodeUnpaid, string medStatus_CodeDeposit, string medStatus_CodePaid, string agenMemID, string sONo, string eN_COMS1, string eN_COMS2, string note, string mOType, string pRO_Code, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string birthMonth, Nullable<int> peroid)
        {
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var vNCloseParameter = vNClose != null ?
                new ObjectParameter("VNClose", vNClose) :
                new ObjectParameter("VNClose", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var cOParameter = cO != null ?
                new ObjectParameter("CO", cO) :
                new ObjectParameter("CO", typeof(string));
    
            var eN_SaveParameter = eN_Save != null ?
                new ObjectParameter("EN_Save", eN_Save) :
                new ObjectParameter("EN_Save", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var priceTotalRefParameter = priceTotalRef.HasValue ?
                new ObjectParameter("PriceTotalRef", priceTotalRef) :
                new ObjectParameter("PriceTotalRef", typeof(decimal));
    
            var row_startParameter = row_start.HasValue ?
                new ObjectParameter("row_start", row_start) :
                new ObjectParameter("row_start", typeof(int));
    
            var row_endParameter = row_end.HasValue ?
                new ObjectParameter("row_end", row_end) :
                new ObjectParameter("row_end", typeof(int));
    
            var tNameParameter = tName != null ?
                new ObjectParameter("TName", tName) :
                new ObjectParameter("TName", typeof(string));
    
            var tSurnameParameter = tSurname != null ?
                new ObjectParameter("TSurname", tSurname) :
                new ObjectParameter("TSurname", typeof(string));
    
            var tabParameter = tab != null ?
                new ObjectParameter("Tab", tab) :
                new ObjectParameter("Tab", typeof(string));
    
            var mS_NameParameter = mS_Name != null ?
                new ObjectParameter("MS_Name", mS_Name) :
                new ObjectParameter("MS_Name", typeof(string));
    
            var ms_CodeParameter = ms_Code != null ?
                new ObjectParameter("Ms_Code", ms_Code) :
                new ObjectParameter("Ms_Code", typeof(string));
    
            var tabwhereParameter = tabwhere != null ?
                new ObjectParameter("Tabwhere", tabwhere) :
                new ObjectParameter("Tabwhere", typeof(string));
    
            var medStatus_CodeParameter = medStatus_Code != null ?
                new ObjectParameter("MedStatus_Code", medStatus_Code) :
                new ObjectParameter("MedStatus_Code", typeof(string));
    
            var medStatus_CodeNewParameter = medStatus_CodeNew != null ?
                new ObjectParameter("MedStatus_CodeNew", medStatus_CodeNew) :
                new ObjectParameter("MedStatus_CodeNew", typeof(string));
    
            var medStatus_CodePendingParameter = medStatus_CodePending != null ?
                new ObjectParameter("MedStatus_CodePending", medStatus_CodePending) :
                new ObjectParameter("MedStatus_CodePending", typeof(string));
    
            var medStatus_CodeClosedParameter = medStatus_CodeClosed != null ?
                new ObjectParameter("MedStatus_CodeClosed", medStatus_CodeClosed) :
                new ObjectParameter("MedStatus_CodeClosed", typeof(string));
    
            var medStatus_CodeUnpaidParameter = medStatus_CodeUnpaid != null ?
                new ObjectParameter("MedStatus_CodeUnpaid", medStatus_CodeUnpaid) :
                new ObjectParameter("MedStatus_CodeUnpaid", typeof(string));
    
            var medStatus_CodeDepositParameter = medStatus_CodeDeposit != null ?
                new ObjectParameter("MedStatus_CodeDeposit", medStatus_CodeDeposit) :
                new ObjectParameter("MedStatus_CodeDeposit", typeof(string));
    
            var medStatus_CodePaidParameter = medStatus_CodePaid != null ?
                new ObjectParameter("MedStatus_CodePaid", medStatus_CodePaid) :
                new ObjectParameter("MedStatus_CodePaid", typeof(string));
    
            var agenMemIDParameter = agenMemID != null ?
                new ObjectParameter("AgenMemID", agenMemID) :
                new ObjectParameter("AgenMemID", typeof(string));
    
            var sONoParameter = sONo != null ?
                new ObjectParameter("SONo", sONo) :
                new ObjectParameter("SONo", typeof(string));
    
            var eN_COMS1Parameter = eN_COMS1 != null ?
                new ObjectParameter("EN_COMS1", eN_COMS1) :
                new ObjectParameter("EN_COMS1", typeof(string));
    
            var eN_COMS2Parameter = eN_COMS2 != null ?
                new ObjectParameter("EN_COMS2", eN_COMS2) :
                new ObjectParameter("EN_COMS2", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var mOTypeParameter = mOType != null ?
                new ObjectParameter("MOType", mOType) :
                new ObjectParameter("MOType", typeof(string));
    
            var pRO_CodeParameter = pRO_Code != null ?
                new ObjectParameter("PRO_Code", pRO_Code) :
                new ObjectParameter("PRO_Code", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var birthMonthParameter = birthMonth != null ?
                new ObjectParameter("BirthMonth", birthMonth) :
                new ObjectParameter("BirthMonth", typeof(string));
    
            var peroidParameter = peroid.HasValue ?
                new ObjectParameter("Peroid", peroid) :
                new ObjectParameter("Peroid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Report_AE", vNParameter, vNCloseParameter, cNParameter, cOParameter, eN_SaveParameter, remarkParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, queryTypeParameter, salePriceParameter, priceTotalRefParameter, row_startParameter, row_endParameter, tNameParameter, tSurnameParameter, tabParameter, mS_NameParameter, ms_CodeParameter, tabwhereParameter, medStatus_CodeParameter, medStatus_CodeNewParameter, medStatus_CodePendingParameter, medStatus_CodeClosedParameter, medStatus_CodeUnpaidParameter, medStatus_CodeDepositParameter, medStatus_CodePaidParameter, agenMemIDParameter, sONoParameter, eN_COMS1Parameter, eN_COMS2Parameter, noteParameter, mOTypeParameter, pRO_CodeParameter, startDateParameter, endDateParameter, birthMonthParameter, peroidParameter);
        }
    
        public virtual int sp_Report_SALE(string vN, string vNClose, string cN, string cO, string eN_Save, string remark, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string queryType, Nullable<decimal> salePrice, Nullable<decimal> priceTotalRef, Nullable<int> row_start, Nullable<int> row_end, string tName, string tSurname, string tab, string mS_Name, string ms_Code, string tabwhere, string medStatus_Code, string medStatus_CodeNew, string medStatus_CodePending, string medStatus_CodeClosed, string medStatus_CodeUnpaid, string medStatus_CodeDeposit, string medStatus_CodePaid, string agenMemID, string sONo, string eN_COMS1, string eN_COMS2, string note, string mOType, string pRO_Code, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string birthMonth, Nullable<int> peroid)
        {
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var vNCloseParameter = vNClose != null ?
                new ObjectParameter("VNClose", vNClose) :
                new ObjectParameter("VNClose", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var cOParameter = cO != null ?
                new ObjectParameter("CO", cO) :
                new ObjectParameter("CO", typeof(string));
    
            var eN_SaveParameter = eN_Save != null ?
                new ObjectParameter("EN_Save", eN_Save) :
                new ObjectParameter("EN_Save", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var priceTotalRefParameter = priceTotalRef.HasValue ?
                new ObjectParameter("PriceTotalRef", priceTotalRef) :
                new ObjectParameter("PriceTotalRef", typeof(decimal));
    
            var row_startParameter = row_start.HasValue ?
                new ObjectParameter("row_start", row_start) :
                new ObjectParameter("row_start", typeof(int));
    
            var row_endParameter = row_end.HasValue ?
                new ObjectParameter("row_end", row_end) :
                new ObjectParameter("row_end", typeof(int));
    
            var tNameParameter = tName != null ?
                new ObjectParameter("TName", tName) :
                new ObjectParameter("TName", typeof(string));
    
            var tSurnameParameter = tSurname != null ?
                new ObjectParameter("TSurname", tSurname) :
                new ObjectParameter("TSurname", typeof(string));
    
            var tabParameter = tab != null ?
                new ObjectParameter("Tab", tab) :
                new ObjectParameter("Tab", typeof(string));
    
            var mS_NameParameter = mS_Name != null ?
                new ObjectParameter("MS_Name", mS_Name) :
                new ObjectParameter("MS_Name", typeof(string));
    
            var ms_CodeParameter = ms_Code != null ?
                new ObjectParameter("Ms_Code", ms_Code) :
                new ObjectParameter("Ms_Code", typeof(string));
    
            var tabwhereParameter = tabwhere != null ?
                new ObjectParameter("Tabwhere", tabwhere) :
                new ObjectParameter("Tabwhere", typeof(string));
    
            var medStatus_CodeParameter = medStatus_Code != null ?
                new ObjectParameter("MedStatus_Code", medStatus_Code) :
                new ObjectParameter("MedStatus_Code", typeof(string));
    
            var medStatus_CodeNewParameter = medStatus_CodeNew != null ?
                new ObjectParameter("MedStatus_CodeNew", medStatus_CodeNew) :
                new ObjectParameter("MedStatus_CodeNew", typeof(string));
    
            var medStatus_CodePendingParameter = medStatus_CodePending != null ?
                new ObjectParameter("MedStatus_CodePending", medStatus_CodePending) :
                new ObjectParameter("MedStatus_CodePending", typeof(string));
    
            var medStatus_CodeClosedParameter = medStatus_CodeClosed != null ?
                new ObjectParameter("MedStatus_CodeClosed", medStatus_CodeClosed) :
                new ObjectParameter("MedStatus_CodeClosed", typeof(string));
    
            var medStatus_CodeUnpaidParameter = medStatus_CodeUnpaid != null ?
                new ObjectParameter("MedStatus_CodeUnpaid", medStatus_CodeUnpaid) :
                new ObjectParameter("MedStatus_CodeUnpaid", typeof(string));
    
            var medStatus_CodeDepositParameter = medStatus_CodeDeposit != null ?
                new ObjectParameter("MedStatus_CodeDeposit", medStatus_CodeDeposit) :
                new ObjectParameter("MedStatus_CodeDeposit", typeof(string));
    
            var medStatus_CodePaidParameter = medStatus_CodePaid != null ?
                new ObjectParameter("MedStatus_CodePaid", medStatus_CodePaid) :
                new ObjectParameter("MedStatus_CodePaid", typeof(string));
    
            var agenMemIDParameter = agenMemID != null ?
                new ObjectParameter("AgenMemID", agenMemID) :
                new ObjectParameter("AgenMemID", typeof(string));
    
            var sONoParameter = sONo != null ?
                new ObjectParameter("SONo", sONo) :
                new ObjectParameter("SONo", typeof(string));
    
            var eN_COMS1Parameter = eN_COMS1 != null ?
                new ObjectParameter("EN_COMS1", eN_COMS1) :
                new ObjectParameter("EN_COMS1", typeof(string));
    
            var eN_COMS2Parameter = eN_COMS2 != null ?
                new ObjectParameter("EN_COMS2", eN_COMS2) :
                new ObjectParameter("EN_COMS2", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var mOTypeParameter = mOType != null ?
                new ObjectParameter("MOType", mOType) :
                new ObjectParameter("MOType", typeof(string));
    
            var pRO_CodeParameter = pRO_Code != null ?
                new ObjectParameter("PRO_Code", pRO_Code) :
                new ObjectParameter("PRO_Code", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var birthMonthParameter = birthMonth != null ?
                new ObjectParameter("BirthMonth", birthMonth) :
                new ObjectParameter("BirthMonth", typeof(string));
    
            var peroidParameter = peroid.HasValue ?
                new ObjectParameter("Peroid", peroid) :
                new ObjectParameter("Peroid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Report_SALE", vNParameter, vNCloseParameter, cNParameter, cOParameter, eN_SaveParameter, remarkParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, queryTypeParameter, salePriceParameter, priceTotalRefParameter, row_startParameter, row_endParameter, tNameParameter, tSurnameParameter, tabParameter, mS_NameParameter, ms_CodeParameter, tabwhereParameter, medStatus_CodeParameter, medStatus_CodeNewParameter, medStatus_CodePendingParameter, medStatus_CodeClosedParameter, medStatus_CodeUnpaidParameter, medStatus_CodeDepositParameter, medStatus_CodePaidParameter, agenMemIDParameter, sONoParameter, eN_COMS1Parameter, eN_COMS2Parameter, noteParameter, mOTypeParameter, pRO_CodeParameter, startDateParameter, endDateParameter, birthMonthParameter, peroidParameter);
        }
    
        public virtual int sp_Report_WE(string vN, string vNClose, string cN, string cO, string eN_Save, string remark, Nullable<System.DateTime> createDate, string createBy, Nullable<System.DateTime> updateDate, string updateBy, string queryType, Nullable<decimal> salePrice, Nullable<decimal> priceTotalRef, Nullable<int> row_start, Nullable<int> row_end, string tName, string tSurname, string tab, string mS_Name, string ms_Code, string tabwhere, string medStatus_Code, string medStatus_CodeNew, string medStatus_CodePending, string medStatus_CodeClosed, string medStatus_CodeUnpaid, string medStatus_CodeDeposit, string medStatus_CodePaid, string agenMemID, string sONo, string eN_COMS1, string eN_COMS2, string note, string mOType, string pRO_Code, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string birthMonth, Nullable<int> peroid)
        {
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var vNCloseParameter = vNClose != null ?
                new ObjectParameter("VNClose", vNClose) :
                new ObjectParameter("VNClose", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var cOParameter = cO != null ?
                new ObjectParameter("CO", cO) :
                new ObjectParameter("CO", typeof(string));
    
            var eN_SaveParameter = eN_Save != null ?
                new ObjectParameter("EN_Save", eN_Save) :
                new ObjectParameter("EN_Save", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy != null ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var priceTotalRefParameter = priceTotalRef.HasValue ?
                new ObjectParameter("PriceTotalRef", priceTotalRef) :
                new ObjectParameter("PriceTotalRef", typeof(decimal));
    
            var row_startParameter = row_start.HasValue ?
                new ObjectParameter("row_start", row_start) :
                new ObjectParameter("row_start", typeof(int));
    
            var row_endParameter = row_end.HasValue ?
                new ObjectParameter("row_end", row_end) :
                new ObjectParameter("row_end", typeof(int));
    
            var tNameParameter = tName != null ?
                new ObjectParameter("TName", tName) :
                new ObjectParameter("TName", typeof(string));
    
            var tSurnameParameter = tSurname != null ?
                new ObjectParameter("TSurname", tSurname) :
                new ObjectParameter("TSurname", typeof(string));
    
            var tabParameter = tab != null ?
                new ObjectParameter("Tab", tab) :
                new ObjectParameter("Tab", typeof(string));
    
            var mS_NameParameter = mS_Name != null ?
                new ObjectParameter("MS_Name", mS_Name) :
                new ObjectParameter("MS_Name", typeof(string));
    
            var ms_CodeParameter = ms_Code != null ?
                new ObjectParameter("Ms_Code", ms_Code) :
                new ObjectParameter("Ms_Code", typeof(string));
    
            var tabwhereParameter = tabwhere != null ?
                new ObjectParameter("Tabwhere", tabwhere) :
                new ObjectParameter("Tabwhere", typeof(string));
    
            var medStatus_CodeParameter = medStatus_Code != null ?
                new ObjectParameter("MedStatus_Code", medStatus_Code) :
                new ObjectParameter("MedStatus_Code", typeof(string));
    
            var medStatus_CodeNewParameter = medStatus_CodeNew != null ?
                new ObjectParameter("MedStatus_CodeNew", medStatus_CodeNew) :
                new ObjectParameter("MedStatus_CodeNew", typeof(string));
    
            var medStatus_CodePendingParameter = medStatus_CodePending != null ?
                new ObjectParameter("MedStatus_CodePending", medStatus_CodePending) :
                new ObjectParameter("MedStatus_CodePending", typeof(string));
    
            var medStatus_CodeClosedParameter = medStatus_CodeClosed != null ?
                new ObjectParameter("MedStatus_CodeClosed", medStatus_CodeClosed) :
                new ObjectParameter("MedStatus_CodeClosed", typeof(string));
    
            var medStatus_CodeUnpaidParameter = medStatus_CodeUnpaid != null ?
                new ObjectParameter("MedStatus_CodeUnpaid", medStatus_CodeUnpaid) :
                new ObjectParameter("MedStatus_CodeUnpaid", typeof(string));
    
            var medStatus_CodeDepositParameter = medStatus_CodeDeposit != null ?
                new ObjectParameter("MedStatus_CodeDeposit", medStatus_CodeDeposit) :
                new ObjectParameter("MedStatus_CodeDeposit", typeof(string));
    
            var medStatus_CodePaidParameter = medStatus_CodePaid != null ?
                new ObjectParameter("MedStatus_CodePaid", medStatus_CodePaid) :
                new ObjectParameter("MedStatus_CodePaid", typeof(string));
    
            var agenMemIDParameter = agenMemID != null ?
                new ObjectParameter("AgenMemID", agenMemID) :
                new ObjectParameter("AgenMemID", typeof(string));
    
            var sONoParameter = sONo != null ?
                new ObjectParameter("SONo", sONo) :
                new ObjectParameter("SONo", typeof(string));
    
            var eN_COMS1Parameter = eN_COMS1 != null ?
                new ObjectParameter("EN_COMS1", eN_COMS1) :
                new ObjectParameter("EN_COMS1", typeof(string));
    
            var eN_COMS2Parameter = eN_COMS2 != null ?
                new ObjectParameter("EN_COMS2", eN_COMS2) :
                new ObjectParameter("EN_COMS2", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var mOTypeParameter = mOType != null ?
                new ObjectParameter("MOType", mOType) :
                new ObjectParameter("MOType", typeof(string));
    
            var pRO_CodeParameter = pRO_Code != null ?
                new ObjectParameter("PRO_Code", pRO_Code) :
                new ObjectParameter("PRO_Code", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var birthMonthParameter = birthMonth != null ?
                new ObjectParameter("BirthMonth", birthMonth) :
                new ObjectParameter("BirthMonth", typeof(string));
    
            var peroidParameter = peroid.HasValue ?
                new ObjectParameter("Peroid", peroid) :
                new ObjectParameter("Peroid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Report_WE", vNParameter, vNCloseParameter, cNParameter, cOParameter, eN_SaveParameter, remarkParameter, createDateParameter, createByParameter, updateDateParameter, updateByParameter, queryTypeParameter, salePriceParameter, priceTotalRefParameter, row_startParameter, row_endParameter, tNameParameter, tSurnameParameter, tabParameter, mS_NameParameter, ms_CodeParameter, tabwhereParameter, medStatus_CodeParameter, medStatus_CodeNewParameter, medStatus_CodePendingParameter, medStatus_CodeClosedParameter, medStatus_CodeUnpaidParameter, medStatus_CodeDepositParameter, medStatus_CodePaidParameter, agenMemIDParameter, sONoParameter, eN_COMS1Parameter, eN_COMS2Parameter, noteParameter, mOTypeParameter, pRO_CodeParameter, startDateParameter, endDateParameter, birthMonthParameter, peroidParameter);
        }
    
        public virtual ObjectResult<sp_StuffCommission_Result> sp_StuffCommission(string queryType, Nullable<int> salePrice, string position_Type)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(int));
    
            var position_TypeParameter = position_Type != null ?
                new ObjectParameter("Position_Type", position_Type) :
                new ObjectParameter("Position_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StuffCommission_Result>("sp_StuffCommission", queryTypeParameter, salePriceParameter, position_TypeParameter);
        }
    
        public virtual ObjectResult<string> sp_SumOfTreatment(string queryType, string creditCashQueryType, string vN, string eN, string sOT_Code, string cN, string sO, string sORef, string pRO_Code, string rCNo, string medStatus_Code, Nullable<decimal> receiptBath, Nullable<decimal> iNVBath, string vat, string nonVat, Nullable<System.DateTime> receiptDate, Nullable<System.DateTime> dateSave, Nullable<System.DateTime> dateUpdate, Nullable<decimal> salePrice, Nullable<decimal> discount, Nullable<decimal> earnestMoney, Nullable<decimal> netAmount, Nullable<decimal> unpaid, Nullable<decimal> discountPercen, Nullable<decimal> discountBathByItem, Nullable<decimal> discountBath, string remark, Nullable<decimal> payByItem, Nullable<decimal> moneyCredit, string pay_Code, string cD_Code, string cardNumber, Nullable<decimal> cashMoney, Nullable<decimal> priceAfterDis, Nullable<int> payInID, string bankName, Nullable<int> count, string mS_Code, string sUR_ID, string eN_Save, string eN_COMS, string eN_COMS2, Nullable<decimal> com_Bath, Nullable<decimal> com_Bath2, string reCeiptNo, string invNo, string cardType, string billTo, string listOrder, string sORefAccount, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> refund, Nullable<System.DateTime> refundDate, string refundType, string refundRemark, string whereDelRCN, string payRefID)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var creditCashQueryTypeParameter = creditCashQueryType != null ?
                new ObjectParameter("CreditCashQueryType", creditCashQueryType) :
                new ObjectParameter("CreditCashQueryType", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var eNParameter = eN != null ?
                new ObjectParameter("EN", eN) :
                new ObjectParameter("EN", typeof(string));
    
            var sOT_CodeParameter = sOT_Code != null ?
                new ObjectParameter("SOT_Code", sOT_Code) :
                new ObjectParameter("SOT_Code", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var sOParameter = sO != null ?
                new ObjectParameter("SO", sO) :
                new ObjectParameter("SO", typeof(string));
    
            var sORefParameter = sORef != null ?
                new ObjectParameter("SORef", sORef) :
                new ObjectParameter("SORef", typeof(string));
    
            var pRO_CodeParameter = pRO_Code != null ?
                new ObjectParameter("PRO_Code", pRO_Code) :
                new ObjectParameter("PRO_Code", typeof(string));
    
            var rCNoParameter = rCNo != null ?
                new ObjectParameter("RCNo", rCNo) :
                new ObjectParameter("RCNo", typeof(string));
    
            var medStatus_CodeParameter = medStatus_Code != null ?
                new ObjectParameter("MedStatus_Code", medStatus_Code) :
                new ObjectParameter("MedStatus_Code", typeof(string));
    
            var receiptBathParameter = receiptBath.HasValue ?
                new ObjectParameter("ReceiptBath", receiptBath) :
                new ObjectParameter("ReceiptBath", typeof(decimal));
    
            var iNVBathParameter = iNVBath.HasValue ?
                new ObjectParameter("INVBath", iNVBath) :
                new ObjectParameter("INVBath", typeof(decimal));
    
            var vatParameter = vat != null ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(string));
    
            var nonVatParameter = nonVat != null ?
                new ObjectParameter("NonVat", nonVat) :
                new ObjectParameter("NonVat", typeof(string));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var dateSaveParameter = dateSave.HasValue ?
                new ObjectParameter("DateSave", dateSave) :
                new ObjectParameter("DateSave", typeof(System.DateTime));
    
            var dateUpdateParameter = dateUpdate.HasValue ?
                new ObjectParameter("DateUpdate", dateUpdate) :
                new ObjectParameter("DateUpdate", typeof(System.DateTime));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var earnestMoneyParameter = earnestMoney.HasValue ?
                new ObjectParameter("EarnestMoney", earnestMoney) :
                new ObjectParameter("EarnestMoney", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var unpaidParameter = unpaid.HasValue ?
                new ObjectParameter("Unpaid", unpaid) :
                new ObjectParameter("Unpaid", typeof(decimal));
    
            var discountPercenParameter = discountPercen.HasValue ?
                new ObjectParameter("DiscountPercen", discountPercen) :
                new ObjectParameter("DiscountPercen", typeof(decimal));
    
            var discountBathByItemParameter = discountBathByItem.HasValue ?
                new ObjectParameter("DiscountBathByItem", discountBathByItem) :
                new ObjectParameter("DiscountBathByItem", typeof(decimal));
    
            var discountBathParameter = discountBath.HasValue ?
                new ObjectParameter("DiscountBath", discountBath) :
                new ObjectParameter("DiscountBath", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var payByItemParameter = payByItem.HasValue ?
                new ObjectParameter("PayByItem", payByItem) :
                new ObjectParameter("PayByItem", typeof(decimal));
    
            var moneyCreditParameter = moneyCredit.HasValue ?
                new ObjectParameter("MoneyCredit", moneyCredit) :
                new ObjectParameter("MoneyCredit", typeof(decimal));
    
            var pay_CodeParameter = pay_Code != null ?
                new ObjectParameter("Pay_Code", pay_Code) :
                new ObjectParameter("Pay_Code", typeof(string));
    
            var cD_CodeParameter = cD_Code != null ?
                new ObjectParameter("CD_Code", cD_Code) :
                new ObjectParameter("CD_Code", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var cashMoneyParameter = cashMoney.HasValue ?
                new ObjectParameter("CashMoney", cashMoney) :
                new ObjectParameter("CashMoney", typeof(decimal));
    
            var priceAfterDisParameter = priceAfterDis.HasValue ?
                new ObjectParameter("PriceAfterDis", priceAfterDis) :
                new ObjectParameter("PriceAfterDis", typeof(decimal));
    
            var payInIDParameter = payInID.HasValue ?
                new ObjectParameter("PayInID", payInID) :
                new ObjectParameter("PayInID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var sUR_IDParameter = sUR_ID != null ?
                new ObjectParameter("SUR_ID", sUR_ID) :
                new ObjectParameter("SUR_ID", typeof(string));
    
            var eN_SaveParameter = eN_Save != null ?
                new ObjectParameter("EN_Save", eN_Save) :
                new ObjectParameter("EN_Save", typeof(string));
    
            var eN_COMSParameter = eN_COMS != null ?
                new ObjectParameter("EN_COMS", eN_COMS) :
                new ObjectParameter("EN_COMS", typeof(string));
    
            var eN_COMS2Parameter = eN_COMS2 != null ?
                new ObjectParameter("EN_COMS2", eN_COMS2) :
                new ObjectParameter("EN_COMS2", typeof(string));
    
            var com_BathParameter = com_Bath.HasValue ?
                new ObjectParameter("Com_Bath", com_Bath) :
                new ObjectParameter("Com_Bath", typeof(decimal));
    
            var com_Bath2Parameter = com_Bath2.HasValue ?
                new ObjectParameter("Com_Bath2", com_Bath2) :
                new ObjectParameter("Com_Bath2", typeof(decimal));
    
            var reCeiptNoParameter = reCeiptNo != null ?
                new ObjectParameter("ReCeiptNo", reCeiptNo) :
                new ObjectParameter("ReCeiptNo", typeof(string));
    
            var invNoParameter = invNo != null ?
                new ObjectParameter("InvNo", invNo) :
                new ObjectParameter("InvNo", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var billToParameter = billTo != null ?
                new ObjectParameter("BillTo", billTo) :
                new ObjectParameter("BillTo", typeof(string));
    
            var listOrderParameter = listOrder != null ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(string));
    
            var sORefAccountParameter = sORefAccount != null ?
                new ObjectParameter("SORefAccount", sORefAccount) :
                new ObjectParameter("SORefAccount", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var refundParameter = refund.HasValue ?
                new ObjectParameter("Refund", refund) :
                new ObjectParameter("Refund", typeof(decimal));
    
            var refundDateParameter = refundDate.HasValue ?
                new ObjectParameter("RefundDate", refundDate) :
                new ObjectParameter("RefundDate", typeof(System.DateTime));
    
            var refundTypeParameter = refundType != null ?
                new ObjectParameter("RefundType", refundType) :
                new ObjectParameter("RefundType", typeof(string));
    
            var refundRemarkParameter = refundRemark != null ?
                new ObjectParameter("RefundRemark", refundRemark) :
                new ObjectParameter("RefundRemark", typeof(string));
    
            var whereDelRCNParameter = whereDelRCN != null ?
                new ObjectParameter("WhereDelRCN", whereDelRCN) :
                new ObjectParameter("WhereDelRCN", typeof(string));
    
            var payRefIDParameter = payRefID != null ?
                new ObjectParameter("PayRefID", payRefID) :
                new ObjectParameter("PayRefID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_SumOfTreatment", queryTypeParameter, creditCashQueryTypeParameter, vNParameter, eNParameter, sOT_CodeParameter, cNParameter, sOParameter, sORefParameter, pRO_CodeParameter, rCNoParameter, medStatus_CodeParameter, receiptBathParameter, iNVBathParameter, vatParameter, nonVatParameter, receiptDateParameter, dateSaveParameter, dateUpdateParameter, salePriceParameter, discountParameter, earnestMoneyParameter, netAmountParameter, unpaidParameter, discountPercenParameter, discountBathByItemParameter, discountBathParameter, remarkParameter, payByItemParameter, moneyCreditParameter, pay_CodeParameter, cD_CodeParameter, cardNumberParameter, cashMoneyParameter, priceAfterDisParameter, payInIDParameter, bankNameParameter, countParameter, mS_CodeParameter, sUR_IDParameter, eN_SaveParameter, eN_COMSParameter, eN_COMS2Parameter, com_BathParameter, com_Bath2Parameter, reCeiptNoParameter, invNoParameter, cardTypeParameter, billToParameter, listOrderParameter, sORefAccountParameter, startDateParameter, endDateParameter, refundParameter, refundDateParameter, refundTypeParameter, refundRemarkParameter, whereDelRCNParameter, payRefIDParameter);
        }
    
        public virtual ObjectResult<string> sp_SupplieTrans(string queryType, string vN, string mS_Code, string mS_CodeM, string mS_CodeS, string listOrderS, Nullable<decimal> amount, Nullable<decimal> numOfUse, string flagUse, Nullable<decimal> freeAmount, string complimentary, string marketingBudget, string subject, string gift, string giftNumber, string mergStatus, Nullable<decimal> feeRate, Nullable<decimal> feeRate2, string beforeAfter, string extras_sale, string vIP, string expireDate, string note, string sONo, Nullable<decimal> specialPrice, Nullable<decimal> mS_Price, Nullable<decimal> priceAfterDis, Nullable<decimal> discount, Nullable<decimal> upPrice, string pRO_MDiscount, string listOrder, string listOrderM, string eN, string contractResultID, string branchId, string saleCom, string byDr, string canceled, string freeType, string giftCodeOther, string approve, string approve2, string remark, string pRO_Dept, string pRO_Code, string sORef, string mS_CodeRef, string listOrderRef, string amountPro, string pricePerPro, string refVN, string mOType, Nullable<int> renewAddMonth, Nullable<System.DateTime> renewStartDate)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var mS_CodeMParameter = mS_CodeM != null ?
                new ObjectParameter("MS_CodeM", mS_CodeM) :
                new ObjectParameter("MS_CodeM", typeof(string));
    
            var mS_CodeSParameter = mS_CodeS != null ?
                new ObjectParameter("MS_CodeS", mS_CodeS) :
                new ObjectParameter("MS_CodeS", typeof(string));
    
            var listOrderSParameter = listOrderS != null ?
                new ObjectParameter("ListOrderS", listOrderS) :
                new ObjectParameter("ListOrderS", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var numOfUseParameter = numOfUse.HasValue ?
                new ObjectParameter("NumOfUse", numOfUse) :
                new ObjectParameter("NumOfUse", typeof(decimal));
    
            var flagUseParameter = flagUse != null ?
                new ObjectParameter("FlagUse", flagUse) :
                new ObjectParameter("FlagUse", typeof(string));
    
            var freeAmountParameter = freeAmount.HasValue ?
                new ObjectParameter("FreeAmount", freeAmount) :
                new ObjectParameter("FreeAmount", typeof(decimal));
    
            var complimentaryParameter = complimentary != null ?
                new ObjectParameter("Complimentary", complimentary) :
                new ObjectParameter("Complimentary", typeof(string));
    
            var marketingBudgetParameter = marketingBudget != null ?
                new ObjectParameter("MarketingBudget", marketingBudget) :
                new ObjectParameter("MarketingBudget", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var giftParameter = gift != null ?
                new ObjectParameter("Gift", gift) :
                new ObjectParameter("Gift", typeof(string));
    
            var giftNumberParameter = giftNumber != null ?
                new ObjectParameter("GiftNumber", giftNumber) :
                new ObjectParameter("GiftNumber", typeof(string));
    
            var mergStatusParameter = mergStatus != null ?
                new ObjectParameter("MergStatus", mergStatus) :
                new ObjectParameter("MergStatus", typeof(string));
    
            var feeRateParameter = feeRate.HasValue ?
                new ObjectParameter("FeeRate", feeRate) :
                new ObjectParameter("FeeRate", typeof(decimal));
    
            var feeRate2Parameter = feeRate2.HasValue ?
                new ObjectParameter("FeeRate2", feeRate2) :
                new ObjectParameter("FeeRate2", typeof(decimal));
    
            var beforeAfterParameter = beforeAfter != null ?
                new ObjectParameter("BeforeAfter", beforeAfter) :
                new ObjectParameter("BeforeAfter", typeof(string));
    
            var extras_saleParameter = extras_sale != null ?
                new ObjectParameter("Extras_sale", extras_sale) :
                new ObjectParameter("Extras_sale", typeof(string));
    
            var vIPParameter = vIP != null ?
                new ObjectParameter("VIP", vIP) :
                new ObjectParameter("VIP", typeof(string));
    
            var expireDateParameter = expireDate != null ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var sONoParameter = sONo != null ?
                new ObjectParameter("SONo", sONo) :
                new ObjectParameter("SONo", typeof(string));
    
            var specialPriceParameter = specialPrice.HasValue ?
                new ObjectParameter("SpecialPrice", specialPrice) :
                new ObjectParameter("SpecialPrice", typeof(decimal));
    
            var mS_PriceParameter = mS_Price.HasValue ?
                new ObjectParameter("MS_Price", mS_Price) :
                new ObjectParameter("MS_Price", typeof(decimal));
    
            var priceAfterDisParameter = priceAfterDis.HasValue ?
                new ObjectParameter("PriceAfterDis", priceAfterDis) :
                new ObjectParameter("PriceAfterDis", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var upPriceParameter = upPrice.HasValue ?
                new ObjectParameter("UpPrice", upPrice) :
                new ObjectParameter("UpPrice", typeof(decimal));
    
            var pRO_MDiscountParameter = pRO_MDiscount != null ?
                new ObjectParameter("PRO_MDiscount", pRO_MDiscount) :
                new ObjectParameter("PRO_MDiscount", typeof(string));
    
            var listOrderParameter = listOrder != null ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(string));
    
            var listOrderMParameter = listOrderM != null ?
                new ObjectParameter("ListOrderM", listOrderM) :
                new ObjectParameter("ListOrderM", typeof(string));
    
            var eNParameter = eN != null ?
                new ObjectParameter("EN", eN) :
                new ObjectParameter("EN", typeof(string));
    
            var contractResultIDParameter = contractResultID != null ?
                new ObjectParameter("ContractResultID", contractResultID) :
                new ObjectParameter("ContractResultID", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var saleComParameter = saleCom != null ?
                new ObjectParameter("SaleCom", saleCom) :
                new ObjectParameter("SaleCom", typeof(string));
    
            var byDrParameter = byDr != null ?
                new ObjectParameter("ByDr", byDr) :
                new ObjectParameter("ByDr", typeof(string));
    
            var canceledParameter = canceled != null ?
                new ObjectParameter("Canceled", canceled) :
                new ObjectParameter("Canceled", typeof(string));
    
            var freeTypeParameter = freeType != null ?
                new ObjectParameter("FreeType", freeType) :
                new ObjectParameter("FreeType", typeof(string));
    
            var giftCodeOtherParameter = giftCodeOther != null ?
                new ObjectParameter("GiftCodeOther", giftCodeOther) :
                new ObjectParameter("GiftCodeOther", typeof(string));
    
            var approveParameter = approve != null ?
                new ObjectParameter("Approve", approve) :
                new ObjectParameter("Approve", typeof(string));
    
            var approve2Parameter = approve2 != null ?
                new ObjectParameter("Approve2", approve2) :
                new ObjectParameter("Approve2", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var pRO_DeptParameter = pRO_Dept != null ?
                new ObjectParameter("PRO_Dept", pRO_Dept) :
                new ObjectParameter("PRO_Dept", typeof(string));
    
            var pRO_CodeParameter = pRO_Code != null ?
                new ObjectParameter("PRO_Code", pRO_Code) :
                new ObjectParameter("PRO_Code", typeof(string));
    
            var sORefParameter = sORef != null ?
                new ObjectParameter("SORef", sORef) :
                new ObjectParameter("SORef", typeof(string));
    
            var mS_CodeRefParameter = mS_CodeRef != null ?
                new ObjectParameter("MS_CodeRef", mS_CodeRef) :
                new ObjectParameter("MS_CodeRef", typeof(string));
    
            var listOrderRefParameter = listOrderRef != null ?
                new ObjectParameter("ListOrderRef", listOrderRef) :
                new ObjectParameter("ListOrderRef", typeof(string));
    
            var amountProParameter = amountPro != null ?
                new ObjectParameter("AmountPro", amountPro) :
                new ObjectParameter("AmountPro", typeof(string));
    
            var pricePerProParameter = pricePerPro != null ?
                new ObjectParameter("PricePerPro", pricePerPro) :
                new ObjectParameter("PricePerPro", typeof(string));
    
            var refVNParameter = refVN != null ?
                new ObjectParameter("RefVN", refVN) :
                new ObjectParameter("RefVN", typeof(string));
    
            var mOTypeParameter = mOType != null ?
                new ObjectParameter("MOType", mOType) :
                new ObjectParameter("MOType", typeof(string));
    
            var renewAddMonthParameter = renewAddMonth.HasValue ?
                new ObjectParameter("RenewAddMonth", renewAddMonth) :
                new ObjectParameter("RenewAddMonth", typeof(int));
    
            var renewStartDateParameter = renewStartDate.HasValue ?
                new ObjectParameter("RenewStartDate", renewStartDate) :
                new ObjectParameter("RenewStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_SupplieTrans", queryTypeParameter, vNParameter, mS_CodeParameter, mS_CodeMParameter, mS_CodeSParameter, listOrderSParameter, amountParameter, numOfUseParameter, flagUseParameter, freeAmountParameter, complimentaryParameter, marketingBudgetParameter, subjectParameter, giftParameter, giftNumberParameter, mergStatusParameter, feeRateParameter, feeRate2Parameter, beforeAfterParameter, extras_saleParameter, vIPParameter, expireDateParameter, noteParameter, sONoParameter, specialPriceParameter, mS_PriceParameter, priceAfterDisParameter, discountParameter, upPriceParameter, pRO_MDiscountParameter, listOrderParameter, listOrderMParameter, eNParameter, contractResultIDParameter, branchIdParameter, saleComParameter, byDrParameter, canceledParameter, freeTypeParameter, giftCodeOtherParameter, approveParameter, approve2Parameter, remarkParameter, pRO_DeptParameter, pRO_CodeParameter, sORefParameter, mS_CodeRefParameter, listOrderRefParameter, amountProParameter, pricePerProParameter, refVNParameter, mOTypeParameter, renewAddMonthParameter, renewStartDateParameter);
        }
    
        public virtual ObjectResult<string> sp_SurgeryFee(string queryType, string tablename, Nullable<decimal> salePrice, string position_Type, string position_ID, string vN, string sONo, string eN, string eN_Save, string sUR_ID, string cN, string anesthesia, Nullable<System.DateTime> procedureDate, Nullable<System.DateTime> startAnesth, Nullable<System.DateTime> endAnesth, Nullable<System.DateTime> startProcedure, Nullable<System.DateTime> endProcedure, string remark, string mS_Code, string listOrder, Nullable<int> admit, Nullable<decimal> com_Bath, Nullable<decimal> netIncome, Nullable<decimal> charges, Nullable<System.DateTime> com_Date, Nullable<System.DateTime> dateUpdate, string useTransId, string whereDate, string subSurgical, Nullable<int> extraMoney, string position_IDSave, string startDate, string endDate, Nullable<decimal> actuallyAmount, string branchId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var tablenameParameter = tablename != null ?
                new ObjectParameter("Tablename", tablename) :
                new ObjectParameter("Tablename", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(decimal));
    
            var position_TypeParameter = position_Type != null ?
                new ObjectParameter("Position_Type", position_Type) :
                new ObjectParameter("Position_Type", typeof(string));
    
            var position_IDParameter = position_ID != null ?
                new ObjectParameter("Position_ID", position_ID) :
                new ObjectParameter("Position_ID", typeof(string));
    
            var vNParameter = vN != null ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(string));
    
            var sONoParameter = sONo != null ?
                new ObjectParameter("SONo", sONo) :
                new ObjectParameter("SONo", typeof(string));
    
            var eNParameter = eN != null ?
                new ObjectParameter("EN", eN) :
                new ObjectParameter("EN", typeof(string));
    
            var eN_SaveParameter = eN_Save != null ?
                new ObjectParameter("EN_Save", eN_Save) :
                new ObjectParameter("EN_Save", typeof(string));
    
            var sUR_IDParameter = sUR_ID != null ?
                new ObjectParameter("SUR_ID", sUR_ID) :
                new ObjectParameter("SUR_ID", typeof(string));
    
            var cNParameter = cN != null ?
                new ObjectParameter("CN", cN) :
                new ObjectParameter("CN", typeof(string));
    
            var anesthesiaParameter = anesthesia != null ?
                new ObjectParameter("Anesthesia", anesthesia) :
                new ObjectParameter("Anesthesia", typeof(string));
    
            var procedureDateParameter = procedureDate.HasValue ?
                new ObjectParameter("ProcedureDate", procedureDate) :
                new ObjectParameter("ProcedureDate", typeof(System.DateTime));
    
            var startAnesthParameter = startAnesth.HasValue ?
                new ObjectParameter("StartAnesth", startAnesth) :
                new ObjectParameter("StartAnesth", typeof(System.DateTime));
    
            var endAnesthParameter = endAnesth.HasValue ?
                new ObjectParameter("EndAnesth", endAnesth) :
                new ObjectParameter("EndAnesth", typeof(System.DateTime));
    
            var startProcedureParameter = startProcedure.HasValue ?
                new ObjectParameter("StartProcedure", startProcedure) :
                new ObjectParameter("StartProcedure", typeof(System.DateTime));
    
            var endProcedureParameter = endProcedure.HasValue ?
                new ObjectParameter("EndProcedure", endProcedure) :
                new ObjectParameter("EndProcedure", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var mS_CodeParameter = mS_Code != null ?
                new ObjectParameter("MS_Code", mS_Code) :
                new ObjectParameter("MS_Code", typeof(string));
    
            var listOrderParameter = listOrder != null ?
                new ObjectParameter("ListOrder", listOrder) :
                new ObjectParameter("ListOrder", typeof(string));
    
            var admitParameter = admit.HasValue ?
                new ObjectParameter("Admit", admit) :
                new ObjectParameter("Admit", typeof(int));
    
            var com_BathParameter = com_Bath.HasValue ?
                new ObjectParameter("Com_Bath", com_Bath) :
                new ObjectParameter("Com_Bath", typeof(decimal));
    
            var netIncomeParameter = netIncome.HasValue ?
                new ObjectParameter("NetIncome", netIncome) :
                new ObjectParameter("NetIncome", typeof(decimal));
    
            var chargesParameter = charges.HasValue ?
                new ObjectParameter("Charges", charges) :
                new ObjectParameter("Charges", typeof(decimal));
    
            var com_DateParameter = com_Date.HasValue ?
                new ObjectParameter("Com_Date", com_Date) :
                new ObjectParameter("Com_Date", typeof(System.DateTime));
    
            var dateUpdateParameter = dateUpdate.HasValue ?
                new ObjectParameter("DateUpdate", dateUpdate) :
                new ObjectParameter("DateUpdate", typeof(System.DateTime));
    
            var useTransIdParameter = useTransId != null ?
                new ObjectParameter("UseTransId", useTransId) :
                new ObjectParameter("UseTransId", typeof(string));
    
            var whereDateParameter = whereDate != null ?
                new ObjectParameter("whereDate", whereDate) :
                new ObjectParameter("whereDate", typeof(string));
    
            var subSurgicalParameter = subSurgical != null ?
                new ObjectParameter("SubSurgical", subSurgical) :
                new ObjectParameter("SubSurgical", typeof(string));
    
            var extraMoneyParameter = extraMoney.HasValue ?
                new ObjectParameter("ExtraMoney", extraMoney) :
                new ObjectParameter("ExtraMoney", typeof(int));
    
            var position_IDSaveParameter = position_IDSave != null ?
                new ObjectParameter("Position_IDSave", position_IDSave) :
                new ObjectParameter("Position_IDSave", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var actuallyAmountParameter = actuallyAmount.HasValue ?
                new ObjectParameter("ActuallyAmount", actuallyAmount) :
                new ObjectParameter("ActuallyAmount", typeof(decimal));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_SurgeryFee", queryTypeParameter, tablenameParameter, salePriceParameter, position_TypeParameter, position_IDParameter, vNParameter, sONoParameter, eNParameter, eN_SaveParameter, sUR_IDParameter, cNParameter, anesthesiaParameter, procedureDateParameter, startAnesthParameter, endAnesthParameter, startProcedureParameter, endProcedureParameter, remarkParameter, mS_CodeParameter, listOrderParameter, admitParameter, com_BathParameter, netIncomeParameter, chargesParameter, com_DateParameter, dateUpdateParameter, useTransIdParameter, whereDateParameter, subSurgicalParameter, extraMoneyParameter, position_IDSaveParameter, startDateParameter, endDateParameter, actuallyAmountParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<sp_UserGroup_Result> sp_UserGroup(Nullable<int> iD, string queryType, string groupCode, string groupName)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserGroup_Result>("sp_UserGroup", iDParameter, queryTypeParameter, groupCodeParameter, groupNameParameter);
        }
    
        public virtual int spNS_GetDataMessages(string branchId, string queryType)
        {
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNS_GetDataMessages", branchIdParameter, queryTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> spNS_GetMessages(string queryType)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("spNS_GetMessages", queryTypeParameter);
        }
    
        public virtual int spNS_UpdateStatus(Nullable<int> iMessageId, Nullable<int> iStatus, string queryType)
        {
            var iMessageIdParameter = iMessageId.HasValue ?
                new ObjectParameter("iMessageId", iMessageId) :
                new ObjectParameter("iMessageId", typeof(int));
    
            var iStatusParameter = iStatus.HasValue ?
                new ObjectParameter("iStatus", iStatus) :
                new ObjectParameter("iStatus", typeof(int));
    
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNS_UpdateStatus", iMessageIdParameter, iStatusParameter, queryTypeParameter);
        }
    }
}
